%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 125 117 508 706
%%HiResBoundingBox: 125.000000 117.000000 507.500000 705.500000
%%Creator: dvips(k) 5.96.1 Copyright 2007 Radical Eye Software
%%Title: jaringan-sms.dvi
%%CreationDate: Mon Jan 25 17:08:09 2010
%%PageOrder: Ascend
%%DocumentFonts: CMR10
%%DocumentPaperSizes: a4
%%EndComments
% EPSF created by ps2eps 1.64
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o jaringan-sms.ps jaringan-sms.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2010.01.25:1708
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro
%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro
%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end
%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end
%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end
%%EndProcSet
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 97 /a put
dup 98 /b put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 121 /y put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B283796A9AD847424B4E6508546C36223A3B17EB82A56592F27FC27
F1D49D5FF4BBC0E16231807AF7E195AA7D0D01C7566243448B222D57B811EAE6
DE9370F84E207DC9BEC731AD6040FD9B804FA14CA264B73136F9AF34390319F6
A543D5D4D7FDDDF2F76651E557683614521110DEC1CCAC426117DDA7D6CF1B8B
7879B21FDC78BAB3C944BCDCD6A65B67F3692F0A8D5E36FB783A63D4FBC9842E
2CBC2720A7206F42A99AEC79FBBA92A27965AF40A71E05E4BA8D7FC58C828226
7A8B47241F73590CE626EDA930A1D18D758636250D9D6A09E133378CD725F586
F40320EF186DDF87AF8C2F5470EADFF39C60384EB4DD859794CDD6E4AA8E8A7A
18E246579B5FD876A7C0AFB4D935B09F36A74412957D9BE1DA54DAC6239E5574
A9AB77DC4A6CFBAF23EC30579BA578299EA68B0BFC5B9B4EAA4D3CADB581AC57
6236C14F8F8D56406DC427BBE7913BA2990D22F36D646D3D31A6DB69512AACF4
0A46538C40FE5F6D369871E017069547B6CD9793652C2EE8EF391B88DC95DC58
DD90F27F47D996223903C9A02FB30DB43963F1DD6EAAE43F5E43F19B54FCA3EB
114CFCC68A6B5106C697C5876011047F6679201540AD102C571BF5DD26AA443B
6B73E80D855F5EBFF6A5BCEC484EFF7634D31618ED926015CF883D323F319D95
D79BEA4091291DAE4ED9091359807685D980DDE8915E8718CD2CEA9D364B2E4C
3DB1B8C4238F51C1E63C26E8A0DE65AE6D1C2CC323880D1B2E0EA015221EBEF7
CCDE9C71507CDB279EF7C3C2BCB7C05CE9935ACAA80D222ED198BFD5FE41A9A5
CFE2CC88A46A860FA2AF035F56B900B9B83A65AA5241212DDE0AD719569D7CD8
401EC2700737D33C7E73EE21449B74855BFE321BEBD62C8A8F4D253D6E5DEA04
ED76687C34E019DE7AB08414BBAC58941BCD7B8EACC2EE60D17285F9E2E321C9
6FFADC2773AD0820BB0DA62FDCDAD6F44BD7CE1F5ED50944B27C21025C1675FD
7D8B27F4F7C38152DDA5FA0E1A29E535A22D7758A4294523ADD61F696F6D3B79
E27B5EB4D30EF32CC013A0A5AD5CB45781F292CA3F36CC0FD69ED3CF67C9A4F3
144BCABA1B60C72D5C198F2DDC12E9B15378916CBC09CF1FCC9E7E83A3AF8EEA
739A18E0B83A6FF397AE57898CE753994B85C5094B49ABCA5518911789F7767B
D633D46C908323B75BFC83F7BA094C44A4C1BA68CA5F7C31B3B68CB3DA464A4E
544957A6C6020A5F6C02176DF5B8FD414F0942355BC93FE229ACCAACC83DE842
B5124DB2C8ED064BD89B7C750BA5DAFD4DCA68502E5698FC3485443D4B589364
48AA0E1BAF2D534C9277C013733378C66F8AAF0C6F2832057459A9CD492EF6DC
B97DBC81A34F783DB1D83199CD96E04FBECF5590C5B04953C594349F1E95F04A
C98F84D36B6D329ABCADAF9CEB29E09A792E33194C4516CF0E5038AA49D6EDD8
C0647872E86F3686A7AB9B29C655DDC719F1325975357562C9DCCDEA8EAA120E
EB29FD4D9CD504BC527A08D97C2B2B30587A6292825C069B7A80127C68368DC3
BBC53E38110362BDE0DC63D59F42E91A6BFBA7611A028052CE265F8F863987A0
A3BBE28111D96C0A9196E82AC5922F41B88AFD4F06863B634976930CC8C2AAF3
2AF685C6F52809FCEC9C006DC7D0459C038CA5F5BB42896A0F031741F0A7823C
07DE221767DE8CA008280A7D8458920E0759DC1047A3BF0C89A2098DDE2A09D2
65352044C556EF4D605546A8D73D22E44711C885D2B0D05A049EE27ABFA18FEA
5946FEF7C7ECCEE3F2B23F48DC2DA465D0C4DD2D55D65A3CAEEC87B891EA93C8
B065910CD4DCBF83B11C4A3D36386D9F6BFC4FFF205658911631026E24B1A034
BE084586B99B6671B1D574742EADC24BEACDCCACE444A8C1182ECE23A797F9BE
2AF842FF100D87829F2EFE19B68033ACBC8334122592DD1E4D4D20E2035DF057
4F2CC51939A69D8A9D78B95791E85C0C1856A4EE29E4E9CB7670390E8E457D3B
474EE3606B9250516C61074361286F5F7397602190CAC3DD30E51D4F3FBE9423
7D06BC0B9C9743194FB1F5B4BDAA7A1A880E0839B29C266CA7FA30A10FD6A2FA
262D4408B874905C2E083B1DC6BDEE5EF51D9F0C3A32DED49E01B6665AD2E783
10CA7C7E60684BCCA2D54E99443A2871534257C9A03957B43B4DDCC9CCD1768B
539D9EC3F0F4263FF8D6ED56DCE735E6E8A4CC134032D63A671B6C8FAD1F106A
2BECB4E6ABC9DF6A314DE4449FD30093C987F14A47544A556634D71AD330CD93
1D14CDA7ED463E54BF063C82124C685CA62C35C40ED15D947096E73D97261A8D
EC0C703847125007B536A60173B9B511744D157140C551129C39D90E8EC0A093
220CF9B41968E3E6FE3658FF3E81F53E3B152A71058989C9AD2C0A10C5FB392B
3D0442FF68D3C90ED2DFE1756860AA715CA1CCFAB83D06CA7B94234C0AD76F5B
036518D97A48F65F1FBB699CD745717B7D07E3510E0AEF43F43E50260342DD99
1D264251C77A155B763D0254F144D52FDFB6E41F7827B17B1804A8F0F6D94718
26A43EAA7A90410782A0B5DEFDAECC6BACCE5995A3CCF5D552AAFA6F292882CD
566FDB46D1F0D2AD9A4052B18399E8EC54F61626B77F20EAB1C31630BDF01F67
4B44AF894B8B3467BA7065847E70CE9AB961C5BA4D5F6AFA59E995A3228C5110
E1C0E625D8D3978A025376F132AADA42C1C02AC9FC6A83B4E05C44745C35BC49
78A2362DCCE193E841C219205ED3849E5B0142F3DE13D65F3BBC4D40A3AD0440
C5BEE734A2CBA118842971FF95E6CDE0201F767F009DA7D97E8F59CD56826D34
913C64F3C696D400A04EF69D336E774336999B24FBAB00F900EDC0928F5D4E45
3BC4E306F2368844F0579139E785394208224CD0A96AA5376E6A38CCE598F33C
0AF345CC334F0E09D7FA582692A2ACF91A8D46F9BC4BD1D99DFB2B4FDFF62E49
1D499FD20590EF60E7EF45E31758C6E2BFB378C983883E933BDC9F33A4F8D739
877604F7EFA936BAF3B3EF5BE4AC9E9CE9319F87CAB8015654A4665D0E03E684
123C94D6BADD8FE9B58991F957A0E86D114F9223A8BAECA3FAEEF2A98D643C11
05330D001473CB6EFD9243BDCAB37827899D7FE01E6D355BAA10163542DCDAFD
676CCF3CE4ED45AE122ED13DAC800F7B1C6DC6229D28AE25675B8C7B685C5A26
EF7A44CA9199F374E42217EA25A9959824183A954E02DDC4D31DC7646FB1772C
71B9D50562E6F8F5A7B690550D352DDCB0CBCE20ED5F0A945C50DC355808C1E0
82AF34DFBD4B2CB0301580499B08187576F6CE944FB90F183AD32666339BF0F1
55FD8A194712BBF3739AE0BAE0C9CF970A69C364AD0B502A11BFCF832BE2DBF4
42967FF170C885446B89EC4F1F82AB31704C721D4CD9641D0F6DCCEB939BE13B
BE84039B573206EE4E92B3EC7CF3313058D18DC73A1989EE453D7717900ECA74
190BE87230725BF06396F56BCEDA132563EAA8452E242017D783FC398C152875
680FDC484CED7D0CFB3AD0B2F1151488CF7AFAE112DC369CD4EF3980D6CFC464
571A5BFA01DFD504626BFAD222C7A787EAF9C31C157252A4E0DFF19D6E446F59
E2507E3683D1355651FF586B0A757E0B2E9DF2B8D8B74DC84256769DFDBDCB6E
B55E3887F11B4D967DFAE5D4B63A3AEF0B447F92814FAFF83A707D953CE951AB
6EE6D1A642CE11AFE8323B15C4429829D9512A429F37080FAE10A3BAA1069326
CB01256A9F132C6CF933992BC7A1B7F95458F816CCAAA39F9554D828FB5D0E63
1389A25BE0879E6F66EBC452EE3D7D5F11A4AF955E8137FAE2F64DD6790547FF
5A73FD1B3FB2D2E3D2684A21BA4620503361F227A1ED8664D948892E2B960B78
71FE70858FEFB7CB450E453B10EA377782F807E8588265CFD88FB0C5BE509B1F
02A2BBEBC32C5B6452A76AE3A4A43AE3A290C10BBC49AA03681E5EC9B4F9DED7
C677B794A46EE7049204BDB6C9680E892EF7D64865139C0F64724FF7F00E2739
12C9AEF2FB2CE4FAE36C2352B7503392458EF5619C89AB336C29D307121B0143
C7A980B206092A11E651D028D0DF1783877E7A455C362BF44FE371458B2A5D5B
9664057B6BB6432CF8F4C3979C118849DC2A7FDE195C217F3EF7F14B3852A541
427DC82E474DAF92074820EFB3041E6E1768905987ED36F5A320243B5F1676DE
3348F410613504ED85982AF1378330159C8A0B736A632D297239907EFB861C0B
9B039F92E829CD4BAAE5812C57BBAB8712DCADA215BFD063F32806BC55945560
D5D2D1C5BBF5D89F9C9776860983CA26E4150ADD97A0531C27AEA3B289B4CBE9
14064DACFF17E91B6156CDCE71AE233D3A1097DF7F9978BB6939BF6D989C7289
18FC6B558EEED465E6089B208D8A1F56F01C831F4F41564B96B2D72637754727
54B26CD351C27C59881D28308478A6784E3EB194D3369A18BF68E8A77612E214
1F77824F6C807406920FE67246507578893DD2BF6F149AD1CF6B0AC8526A94DB
7D42CF3252B0D4F92DBD915BBCD06B70ECA46F87AC93F577E0CAA9FA059BC261
84F16274A05E214693518E66874BCAB4AE9BC77C1B327AB34ACF7909F9259B9D
7D0ECED9529AC5DAE74AC57FF8C617594BA36C59D00F5C90BF37AF2AEC8BA974
652288F307189955E641ABAD2021CAB51EB620F32E157A0485F22E39D06B7200
6F5518EF8AFDF4E826BD654DE3A1D1CCCF4AB5825D1D86F23D28047F0D574F84
2F35FF20BD055BC479323195F04CBA6BB5A53348A15A0D34DB57DC0BB5E124D3
2751B5B50CC2D59B5972205096C1552512DCDCEBF91B003B904C9735810507AB
4501E27E6B4D0D8AD5878315CFACFB8D9480D89ADB2A8511CEB4B8367D0136ED
9F4E157DBCD398EBF3F47FAB56F41941D3BE67E0DD11D4EFB96FC1F8192FA0E5
8DC2BF6EE1D43F5CF769E0400DBF3530692781B7E2B0E87CAA09833C96E622EF
ADFC79AF3E43A1654528070AEFAE5A3217F0AE3DB8D381C1C260BDDB9A6CB63E
9996F01A71EB13E126BE41889AB56728A229B78FE9CC3D46C5487FB9D0B47DCC
F80795F18DE2B980ED7CF2435B6437D3A01F951344BE0DE7235FB4E50CAEFF8D
982B96C7A85A8383EA842A8915457A4F375B9891E3DCDD7EE21D305591E5B22E
899F0AFDE9E85831AE97C0D6FFB4B0833BD098F5DDED3430FD9535004EE0611C
BCDE8E059545F0CB4C1C7595E202E64BEAB622785898895F06176BCCD60361F7
72F88B0C98A26406B77D32D22C2AAF7B0B112DD6BE8533BAC48A820C41603FE7
5F4FAD47E8F310B30414009970E7C5AAB98438AABBCC8F7166AC2EEF03ECE6B2
6B9DA200ABF596A090E1668BECCC7F77599D61B813D9665CE20A4327AB24894A
B9F65C3C4D8C0138ED4CEC3BF3E05A0179F1C06173E87CB2F78B4A5100F6796D
84C43240568CB82CDF3DAAB88A63862C581512F6224437D0D24A7324E997952A
357DD0D51EE5724566A5A8C140D68A35EFC78DCEEFA1CAEB69F04419A18213A3
3ECE68F0827876F617FD5FCA1E9B622D695275650B55F3FDEEB3CF9C7D2DDA07
2835781ED31A4C73B0B8BB0EF45AF37FFE9F610AAC2979A2548945E339A6CF6D
D456096F0F76D8CF94B50D93EAF2323C37490C688ED1FE804BBF4DCBA679E611
DD888912CF7B047C2A5C9B0484A555BB043CEA158C26244A8210DCEDD2643D47
86FD54E224FAD067F041073A5DF9D733BB314EBC0825B34B22EB6AD19996A176
2C4E963AC001029DF2D7F6C4710DE0D1FC5EC04AADD14AB41A05C31C34193BC6
D41185FFC40EFEBC9EA47AA6DF85949F78D0DB10891EFF8277C7B316F14FA5EA
63940B360F542B4251041A9EB9C3E6E3BD50FF5C92CD857AE942F8846EEFB8B4
E5FF4C43B4A18F7CD0C2CEC51B9F3653C920CB9CAF84DF0957BCDDABA30C4995
898E91D70891337DD73072BD857A0AE491B56AE7A0DDC6BA02603B678589102F
38500EFCB26CD409EB2E66E8E1B792E5F6FE6100C08E441274E232700EF24101
CFF4ACE28748B20C05A124ECD619D7100477F81147C64B78F812F5E3A3DB60CC
884BF8E56D15798C1F2475105108CA2E9CF159FA8BCB893A30233C92240A994E
F83ADAAA08148B467B7AD586B228551F30471A3C893F5BE8552D13E852CA971A
41C47AC8510E32A9BBF4661BD4C2587F6175CAD91BF18FBDE5EA2251397F42C3
DDD8E7BFC44FFC065EA637DB8DAFBE2A54123BC330343E913BCA12C8EBEB9A3B
B92B348302AB74428865DBA18595545C2CCC06309624D9BDCE5B92D7FD1B822C
0C110F8927514C29E2296A398E4CDD7228B6D4F5E895CCD18D039B55C10ED3F9
103D90747D27230190752ECF14184A972E6615C42B386EB28649998762F682BE
76F581A9D21E37AAB622443A8AB6944E844180E722FC78D863FAAD7701EB7459
7BDB2E37EF07CB16F3B768D31209196212C9BA73966550EC36D6522C71E44A62
CFF6EABA0A9F8CF3A2C8EF96884964719CD47645808B7F8B98208BCA1E16C01A
8C20A92CFBB2B546037F3FD9A06E881EA6E01805303B5CCDEAA93C8B8749E6D4
BD1C980C7935430F28CD35DB9F3D3A5B5743BA414775ACC4CDFE705E52E0C7A8
5CC2BA6F85F6AA79B93A57EABF73F3B268A43E157BA2BE97262A36ABCC759201
0E20F1CC07890EBB96D9F51BFE47820B60443426470CA49AA708705C96687F46
CCE8A1D3847B71AA571A8F42BD74362A850C95AF75967969471B5B7126091DBE
02B2CCE09D2A462163BCD33D5554E0E9CD6AFD6A698D378183EED43A35CFEC6C
B6F75FE7BF8A28A432A7A06C45EE1B8B3B4F47EE297EB66CDCB0F8DC8FC2472C
A744445AF0E69C23FEF522EFFDF8C1339FDB24744AB5C6B094F13D0F0A9C7784
170BF8AE0239DD75D5E367FF350016F8D238826E87ACFD669074AE0864BA58B4
60DF828824D24A8FD466F4488FF340114D2716813E0FCC181D1BECEFE9C18332
6B77211F714DED00308CD3059311D36BA9621DFA0E1A5E6D451B58BABF1D984F
001CA9051C8FA2C18298DD49D634B0379BF08D7CF67059C78474391F11CB7448
BD221E14E4E3BCC8DDE485308CBB3409DC7E1600C13BC98AC259DAE2DA59A541
56D1BDE1444BBB022F22A3D008023809268A05671AAD5D92778A0C161E116AAD
BC1114CC719EE634777A037E0DEE5041214117A2706EB9527CA6C5967F9206BE
B6189EB383408431655C6D92540DF52D007B497511C108F66E30EE2D20D28B98
85F7A063B00B7BD4D80465DD1A8E70B99EF63D69D974E2DDF6FB4E8106D55C42
7B96FD371AD7E832921A3BF8062DCE7BEE7F04131B108F9A0B542186C47F4A7F
FCDF6B94FC055693A96A1F2D9E6071EE73F0748DD3424930DF9CA8566F8FB3AE
47EDA2E8938DDEB3AADF4CDE2E795577E57AF368058326D4E55C35D45731C3A5
60D863F720FD7B4F2F74B24478DDA63C5F65DE5CC5A87B45F8CB9191F08BE5C7
D7907C7DACA9B5EB750E15D906B70BFD10DEEFC36BBBDB405AD9A95C3DD77BFB
827AC175747384F15421FFCD42D6C93CB7DE84E50CF45A0836D871A46DDC2F0D
21474C8E0D66054B7E753F38024A9A39C285F627E724CFD09697D8BAA55AC196
8CA8032F6E553BD8447B922C281A682820812D2EF61A294D9F3B64DF909833EA
E34B919216DECC5ACC560DCC631D9607D62B78D0A7F100D6CF2ABC810EA9AD92
222F1801A1404BA668E83B9DD18500616426399A6424CBA7037A4056BA784187
846634EF682ADAFB7051AFEE3D073AC83D95D632B31B553399CB4A972615A31B
7EEFBB8AAA662772CDB60EC9B3B2D2E572DDF2D13ECEC843710A149095EB1F80
CF643F9DFFCFC1D047A8FFD9F730024B4EAF5A9253A8DF2C688A973D09C02CBC
3282504DA023ADED19BE38D52A572E3793B2993973D4A62150B49A6CB0612D60
F5DDB4A384F4353543A1B609F6F16FE8D7FF6EC690A44A60158721A3F754A842
7A36FBB30BEFBCA347C42E34B17D26A5181D255A7BD04C9EF3CE416D9FCED1FD
6553742E9CAFE491253801B36B91133642D1ABE1E7CC122513AF4620DF558657
7D986F9F5DE8B6C11C64528B247DD2251EAA6DBE4128155FC2DDC02D9CAA4531
FA82C1320FA8530E70A03819AF9340AD7755CFF4D07E7C04177F55792F35336A
EC3F3F94ED1444BBD15D971386D4B62F3E02D23D17CB15D454EDE1E6E74D7995
319CEE17C4A9B0C8ED7AB36ED59B16354306492660C2806389A18C85F126945E
0B08B5F6DAB1DBF4E0797A931647EEC5A3928C90E29DFB353BB260898E5247A5
72A8513B94CCF9BF43976B33B813668D1E904D11070BC3A6F1F9D879CC56F4D7
19404A67662836614DC5B1E4A068E4B484B9A753D8544D237DDC6072DCE3B8F7
DFA61DF6522B3B4F381287C39CDE4E00CF0DB13D45C1DE9FD1E4FAF667E84D91
D413E985A5B61BB03C35444B9A39DF8371E53CB0ACB1AB20D8727908BC866EF6
4058A423FDF61C9F1013BD1BA1B2B8CA0913B9C3BD76076E9AEEEF51951D7963
3022CB906CB6DE5998512AB996C413E3F0CE2AD5A743355BF421B0718ACEAB6F
EF9C89BBF6CB06034E6BFD7C13BC625749CF4332186B0C6653098386EC1C635C
B5F28F33C9C3F709A2D624A108A3E9E6EF78007713542D373BE0AC851C0274CF
A744873B8428675546F8C7707D243496EAD5E882050A6D4415D24120B034B6ED
09D2A9C14B2B14D69861D3603435552E631A1FE6F4D2621A6DFA54B1EA128AE7
AF868C18790B2D1BA91F97780E889D277D3468CB68495FC7CED07D9744E2B7D9
9784DFDC25DBE5F1CE82669585CFD666E3ACA08439B7655D1A19603509683FDE
60143144EA3423C057AC9D0BBA37FD008E03D8BDEAB9778895756A8C7D34FA13
2F1AF4B6310716BBD43D7D84F885460AA013A3F0E61EB5FD08AE02BD4649C648
7C1703604ED3CDF283047C248A2925C201B7F96CF0CBBF657D4D20ABD7CEE3B9
A5B65FA0A78FAF2A28DBE0829CB0732C8F7B78842164F344BE49987A79621C73
2CD1E812CB1C79D28C1330204C74F62D133E1A412762C6599FE2EB5A47B9E4E9
93D6578400E982ECE543F382A49C9E683FE04BA8291F66D4E36BBB025A0EAEF7
EB960A046148475BD2D0870276265C4E77B3A0D55DFB766EA827DDADA4003E79
61B53392898C5A69785F98D7066515AE59728012ACFCD4B668690661F7050DC2
98E68B62CAF794B71EA3E3302EB1BC39FD909DEEB3C4A062C8C9D6A2437A3E30
E157364A0F4E96838D84895B057CF666132A9C8BE46BBCA4808CB2A9F020B9D5
B0684D9803F7431E9E801914FB667ED0BF90BC5C2705395BF12D79E2D93FD4ED
040FB2BB9A6DC9E9A0D3DB7B489C1B577EA7EEA620A1048390BD0A9C4207BA90
30AEA98593DC6CAF609384966DF714C8EF39E089C7801E7E3E291E9F10CF25D3
256317578F1AC4C9ACCE076E9CBD8F4F77D020435A3F4F11FFDA922D3A890B88
825FBB0E74C087737D8ECDCBF4F8B75E866311065EB9F69AD5C4554D8C8CD61C
E994C98F19232379F828DE9A7449F5B6331EB8079E053CE11243B637610AB642
657FB9A62F0CD27DD247C232DD7DC023055ED004D5673C4056B4788102BDCC7C
BA909D15BA52880C7EFEEFB348B0C13BCFCE3F5940523F2BBE513C564CF780C6
BBCD2DEE829C580863B1EE7796D91809AE22CC58C44FD4BDDAA1B1846C2D8DA5
0CD5B1A7DBE4A49F4920B146EFF219EF081E70FC43E2F8C1C995478D8AD83F8B
F4E4B3AEC845F7D264FAAAA86D9BFE5C5F980726EE03649B4AF61E983D73995F
A35A3C75033E0FCCE1A15F950373720D645FDE43130E39DBC810A82D54360CDA
39A543C6DD84F1B3C9BD35BDD7E66C9E3F49CB1B88E179DDEDCCB82758FA681A
44EF78E16EB5795BF61E900E288DCC8FEFC6F0D67C18C9435C347914C3A2DA9E
D2EDBDC6450E2A244935C40498BF957E98AD898C3E0125E6FFE07A82EEF7D821
8F3174B72051404587251C739E8424EEA2BF699D4EACD4694F8948252DFBAB2C
39E5799602B4384F2B16FE73FD8598E106E0ECAD9091B7969F51308E765C2EDF
DE8AA0A809D107D1F3C5131F10DBBDD8B92162BB1650E5C321190A774DA079B2
4F469505613B7512268AB04FA70675C5A6CA1FDF9051D8308607B2C142CC57E5
E647FB7E8A6F97165C5E0C07F4E9CFF0E672A93B05F745F29B5BEA0DA6C4AE65
0ECC56C8C1EFBF194A4C75F747060208204E9F43935A43914832FB462AB60D80
6E49B76B0105A6509327F38A3E39B4B49F8D1FE42C8F5DF818AC775E7FA81A60
E5A3586379B3E96BDB958A257E27A44C3F7A6A970D94EEA92C452CA1A752B710
5D067BE6A441ECCC871FB3B1DF04294257CFC4BD9517A1B1D6B1B52A7C4888E0
A0EA1A0C47DBADFBD91AC63F23A0DB7A1B94D708D9C8615DD88F532B04BD1412
BF66FE94EC242A579A065A58342A4D813AFC803E476C1DFB0CF3E72EB7CB7D90
6BEC4DB14C821971F94EE32CF21E6EAFD54744EA10E3BE3AD0BE23C3940CCAD3
7E56D2C2A15D00522C313F2233F9F368F37E58F4067241F91876F93894473155
9087B206AC7730A6658CABEEB56276BE36A1CD937505F513B3D292583B3A2372
24985CAEB66713552768A716F9A3CC82643975EF7D07E3B732E67E459E273414
E9B1B2C02B101067020CB8FFCB74F216278D5B361E676D7067B7F43F9486FC0B
9EDFB0D1BA26064D6CC08B70827125CAC36D94BC9FAAD23BFE20775014D957E3
F17576C850EC0D646B9FA238F03BE2695D530D365A5B7C70D8B9AFDEBE30F581
79498D82A43FEE0952C12F005522990341F1CA9B1659036200F63C2058BFE84A
0418FE5CE0536D702AF367849E9A7AAA4F89763182044A8ED63CF5721069F9E7
024609AAED42C51B0BD471FA54CFF703AC955CA1F15107210246071F8C70AB21
305874D48E457B000AD0DC0E2B89B8FFCC3A8FE3E1C2765C762FB32DAF00CB1D
2C0D08827D64E2997CF5730288B8C91B1F45AA0820217BB8D6FA8A40116CC4BB
EA08CEB64484D15A8A7F3ED41C35027CB0B368B889CB111DB909F5914CC9BD0E
F50D8549A878D760D277D510E203A23BA841AEFAE13E97F0C59D98156BA52748
E0994F42BA454922C7833ACC7E4B7580630E0222E783630A1A1FEF7CA4E9B1E4
3D1AFB9084EDCB75A5375373E98A9185389B270805E24DE5096B32852E0F20FD
B45791EEB3EBF9BC8C0ECFDDB67AD41147F0A24AAB43FD12DAED443378F926DF
33AA90DE61CCFA7011C0D64D8E73D3E2A7390C44BA879D5BD8C5EEB2C66445C2
5CCE8FAF93B6C4A415FDABB39FC4900726C92231DF3A9D84E984233606F181A0
222261789C78687A18D66E836F5F17FCCBF8EE46DB272A42921A41052D652B94
82B95D3A91DB953EB6E9E06CAE8BB3BDDF52961F371359C763502FF685F2F226
AC70F4D62E83A0F6E298B3A47A0BEDC33EE6270C6BF7DC51CAF8D8110C10368C
500BBDCD8A7AB61C192411942BB5DA07EC3EE3F2E3D75FC8B08994981B91A6ED
C6BD75C0FC2CAEF5DC4B537BCF4DD64023025ED55B125D6657B6F35B6B00E2C7
042F0A39AB76BF9EE785E09F5CBD7A752FBA04514631C6D362DE2E6D893B7764
7A022D7FF1C715C9B30D8EC731DA630B120DA2017656677F170D672702DF2F6D
1E0C43F1B4FCEC5C0D76EAA69970385DA14451055582C6D35D114EFD438B8A3C
EE3192C7571773FABC7731042AF346AE52490ED147C96D7EE78ECEBA3D602FB0
C047CC2FA6482CD772514005B5804061D96B278A3D8B315F4D950CD12BBF0E1F
2DE08C4BE08BBEC773072DBF6F655EB1E2E84B1CA558A75D978C1D7EB1B1C223
ED6224886E69F7E24F14536FBBB88966EC690C2932257CA24A5DDAE398664347
BE960580D85E14CCFC54C8574C7E50E0AEA9D83851BC987E7A94A7B5D4C9EBA7
489C6D0983DB9FB6033E4E704C4F139BF62521975CB945215798F20C21A7F044
39A80EEE96CE1BF336D3D0B4D837BADCEB69161628AF42C478BB2EB1B54E079F
162DD6CAD8C910E2C33156B96802A8B168DC8AB58D6912309618EB07D6583CE4
19E9E618EDDCFC1EC207F0A4DFA859756711613B8DE1D2C0E96D2EC0519A6E68
ECC278B21E03186342313758126AB7C65B8F305CA0FC728DEAE4541686C529EF
DCC2F27981A8ABB8A56CDAED27B2ABB18183AA54EA667E5AE141ED0A1780CB8A
1DCDCFD71875137B838E8309BA43A60383A459E0A9DAF0D52783D5AADD8A6FCC
6674C511EE702AE470CBF9D7D57E6538B8AD294E6BF6626E906935A995B206E4
B1E3631E3FE0320D2A338504CBBC7B3398F63352F368F4C899DBC5DD36B45C48
E17CFE3B3F0C017288C288A88DE6401A68FD46487229C8358B7C21C27CD98329
FACEEE153062E31AF3E440BBCAB8CB00916FC8CDE3BE7516845C87CDB30C332B
90D62107AD53B01FDD6FC14EE30D7C76F8552A0B9FB719895BF1B73DFEFABA47
B7E81008676C4CF20E7ADF4D93C84656A9450E2AA481BEAFE3924F7812D95177
F460E216AF989223A15D5FCF5346AE0C2A669D36A66133EB2AA38FFE98C6A1F3
3BBA65AED6E9BA3AD61ACC0D6DEE759BF2271BA83F39CC5D23A9988DE9D5BD98
B295A1BF464C22B08349F6DE828001116D4F850FC588827D2EE1CAAF53554C2A
42556E36AFE0C20F603B12435947031D6AF00CC267F5DB935491DA1FCA2FD11C
6792DE24D806268E2EF6A6C03C9EA86C20A068124B9CAD6F82716F758F3D4FD5
16F65DC3D60ADFD95EEECB2E48FF4742856E23769EBD49AD0BAF194DB6F92002
0E85713EF1BF0F3DB9C10DB58F93D462704DFDEB0132EC64B8143CA07602422B
801DBFAB96910CFC855C2AB8993AB8C0DF4EB21B82D0F85982ED6573C387E898
4562A940CC83080498CE69E6B5BC912A65FBBF5B830795402ADC87B181FF6B2B
20B8053210E8A5EC4EA4CFBA0EA88BF945D06B66E43243A44C140550F2B1527A
5F012FF3A374AA440154EB2B996FF0F22B03619EC5FC8B52400BD725F2CD1B26
C72A819D0BD00CEA43795AC6EC40B1BE98FC6191F66DA0B70FC70481226ECC53
3081C0FD45F68DA428D184D6B4285160993D10E04898BA572A131057A00D909A
97F1DFE5809F322F3A79778A18E5B3525CFD4B757DEA3758FA6B0523AC2907A2
8AF2F56FB74E1D571C07EBC58089F7DA30071178365CFA5D34FF77479C520221
788C8CF3229A3DC6B68AC8738C55FB14F3EE2994FEE6F021DEB0FEE84F115D8B
A9CA6DC0BF5B56106547ADC7F109FE2B40DDEF0977770365970A6F92362E0139
FECF3D6FCBEF7849EAFF10DAA9F677EEC9D40E053D116D439A3FD68E62DC0ECD
8558FA2999EABA524E639EAEC10423787E890F1EEA4968037775DE784DCB0BBA
AEFC7A8378BE8A4AD074769EC71879E2F01530EA5F350AAA08413BE45FE9655B
7FFFBA5E9E8B241D9604D4421C926437F41B994D858C15AB0C30FFFC0232F81B
DC774F2958F63837FAC48BA2B21A0B2C2743064FD4AC0984988AF4369291E5EF
083F035F07DF64A466B9FC55DE3540E1F32C136F9BF58FCFF2D90D95DFA6B1C2
3C4D053B3B778B767EAC7004C8996FEEF964AD1D4C26583F1D817F0C13E828FF
5AD613DF633C961D907AFAAF29C4D17FFC875964AAD193C899FC7E01FB6D336B
36FBD4A2BBE8BFD6B480DAF462F8B37E73ACA7A639B110546A93892A34E3B0E5
495E41FD0D819CD2825CB0D4C0E463456EE309CFEF11E88C0732819CAEB515DA
86CDF6D90801E7B36253A87B6ACA8D5BFBF380690777704E90E47A2EDDF0FAE7
851A18CADCC5828FB22362BE82C6205FD6990E760D87B5320F45908F8C811EB5
626ABF3846E3FA23721A5D1BF49FD18C51AD6148E6AADFEB0EA20A917A94DF0C
1FD66844294F90D0DA2F9A34511756A3816B8B32B65F65294FBCD107253E1C18
69E10B6B4C3C51A712779F37FE7C78DF0BEF499EC497C3823631C5C663E73496
7CE21AFDEA7D323ED2047491BB03FD620A16A40AA00FBDE00A4E118D856837A8
27B6473ECC876BA94DAD2CDC92173A5C5B6D68B9726D1C215F6CA58DA387EEF0
4913B801D23D509CFC37AE10D6D287C1E84BE832C63672B428B3CB2CE375737B
77975CC7B893015B31884059F040630A7603D472FE824A1D4709A8FF9CA9BD16
A03B736EDA41DC656B9B1974D367079928DCF7E77DE207FAE083342F12A23697
BFD814EA88D028960C2113DF492974051953EABBF9EADEA79AE8F79A3FB96623
B31C4F669379A6A8F5A1B2457BE64E5B32EA34C18831F1675A1EFBFE0A24FAC6
480E679039168324DBF15DE3CEE70AB542DFA62CCC670340AE10F015C68E7905
A1E278562D85AE5643CA910FDEEE22220811B7255C2669B06AE9F5CA29959C33
14A8EBDEFFD2988F0EC527BCF47370F1A7A24DB3E60ADA11EA49A1D2443854A9
928080CB525969E518DEDCDA34F9F6242F02605603535E03AB18E7B65412EC0F
6C431AF3EFA458792448204164208E30320E3C67BB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
TeXDict begin 39158280 55380996 1000 600 600 (jaringan-sms.dvi)
@start /Fa 134[44 1[60 1[46 32 33 33 1[46 42 46 69 23
44 25 23 46 42 25 37 46 1[46 42 7[62 62 85 2[60 46 61
1[57 65 62 76 52 65 43 30 62 1[54 57 63 60 59 62 7[42
42 42 42 42 42 42 42 42 42 42 23 1[23 44[{}55 83.022
/CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 440 723 a
 tx@Dict begin tx@NodeDict begin {21.71666 16.71666 85.84508 42.92253 3.01385 } false /N@M-1-1-1 16 {InitRnode } NewNode end end
 440 723 a 32
w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.71666 neg 82.04507 21.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -92 x Fa(Bp.Y.Suy)n(an)n(to)472
730 y(4333886,)472 830 y(08562869037)1247 723 y
 tx@Dict begin tx@NodeDict begin {22.05 17.05 85.84508 42.92253 3.01385 } false /N@M-1-1-2 16 {InitRnode } NewNode end end
 1247
723 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 17.05 neg 82.04507 22.05 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -90
x Fa(Bu)27 b(Kus/OKA)1279 733 y(4333577,)1279 833 y(085643430434)2054
723 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-1-3 16 {InitRnode } NewNode end end
 2054 723 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(Ek)n(o)f(Hanan)n(to)2086 781 y(081392258790)2891
723 y
 tx@Dict begin tx@NodeDict begin {10.74445 5.74445 85.84508 42.92253 3.01385 } false /N@M-1-1-4 16 {InitRnode } NewNode end end
 2891 723 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.74445 neg 82.04507 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
Fa(Hary)g(tri)i(Nugroho)440 1077 y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-2-1 16 {InitRnode } NewNode end end
 440 1077 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Bu)f(Y)-7 b(os)27 b(S.)472
1134 y(0811256059)1247 1077 y
 tx@Dict begin tx@NodeDict begin {21.77223 16.77222 85.84508 42.92253 3.01385 } false /N@M-1-2-2 16 {InitRnode } NewNode end end
 1247 1077 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.77222 neg 82.04507 21.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -92 x Fa(Bp.)37 b(Neo)27 b(Suradi)1279
1085 y(556180,)1279 1185 y(081578115615)2054 1077 y
 tx@Dict begin tx@NodeDict begin {21.77223 16.77222 85.84508 42.92253 3.01385 } false /N@M-1-2-3 16 {InitRnode } NewNode end end
 2054
1077 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.77222 neg 82.04507 21.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -92
x Fa(Ig.Luddy)g(Indra)2086 1085 y(08122700806,)2086 1185
y(4333648)2891 1077 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-2-4 16 {InitRnode } NewNode end end
 2891 1077 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Bp.Sidhi)h(H)2923 1135
y(4333630)440 1478 y
 tx@Dict begin tx@NodeDict begin {21.77223 16.77222 85.84508 42.92253 3.01385 } false /N@M-1-3-1 16 {InitRnode } NewNode end end
 440 1478 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.77222 neg 82.04507 21.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
@endspecial -91 x Fa(Budiman)472 1486 y(4333578,)472
1586 y(08122942583)1247 1478 y
 tx@Dict begin tx@NodeDict begin {27.71666 22.71666 85.84508 42.92253 3.01385 } false /N@M-1-3-2 16 {InitRnode } NewNode end end
 1247 1478 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 22.71666 neg 82.04507 27.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -142 x Fa(Agung)f(DJ)1279 1436
y(085228245479)1279 1536 y(Bu)g(Suk)-5 b(arjono)1279
1635 y(08122983365)2054 1478 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-3-3 16 {InitRnode } NewNode end end
 2054 1478 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(C.Prihatiningt)n(y)n(as)2086
1536 y(08122940457)2891 1478 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-3-4 16 {InitRnode } NewNode end end
 2891 1478 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Stefan)n(us)27 b(Subagy)n(o)2923
1536 y(081328080811)440 1880 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-4-1 16 {InitRnode } NewNode end end
 440 1880 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Y)-7 b(ak)n(obus)26
b(L)472 1937 y(7839098)1247 1880 y
 tx@Dict begin tx@NodeDict begin {21.77223 16.77222 85.84508 42.92253 3.01385 } false /N@M-1-4-2 16 {InitRnode } NewNode end end
 1247 1880 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.77222 neg 82.04507 21.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -92 x Fa(Bu)h(JB.)h(Sudib)n(y)n(o)1279
1888 y(4333829,)1279 1987 y(08164229555)2054 1880 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-4-3 16 {InitRnode } NewNode end end
 2054
1880 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42
x Fa(FX.)g(Sularto)2086 1937 y(081314190698)2891 1880
y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-4-4 16 {InitRnode } NewNode end end
 2891 1880 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-43 x Fa(Bu)f(Titus)2923 1937 y(0811267658)440 2281 y
 tx@Dict begin tx@NodeDict begin {27.77223 22.77222 85.84508 42.92253 3.01385 } false /N@M-1-5-1 16 {InitRnode } NewNode end end
440 2281 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 22.77222 neg 82.04507 27.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-141 x Fa(Bp.)36 b(Andre)28 b(Muda)472 2240 y(081328692102)472
2339 y(Illona)e(Muda)472 2439 y(081328795814)1247 2281
y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-5-2 16 {InitRnode } NewNode end end
 1247 2281 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(Y.Kamari)1279 2339 y(081342612992)2054 2281
y
 tx@Dict begin tx@NodeDict begin {21.77223 16.77222 85.84508 42.92253 3.01385 } false /N@M-1-5-3 16 {InitRnode } NewNode end end
 2054 2281 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.77222 neg 82.04507 21.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-91 x Fa(Ibu)i(P)-7 b(.Suro)n(y)n(o)2086 2289 y(4333667,)2086
2389 y(08122752803)2891 2281 y
 tx@Dict begin tx@NodeDict begin {16.05 11.05 85.84508 42.92253 3.01385 } false /N@M-1-5-4 16 {InitRnode } NewNode end end
 2891 2281 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 11.05 neg 82.04507 16.05 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -39 x Fa(Bu)27 b(T)-7 b(ris/Hendro)2923
2341 y(081328032468)440 2683 y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-6-1 16 {InitRnode } NewNode end end
 440 2683 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -43 x Fa(Lasiman,)472 2740 y(08170426162)1247
2683 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-6-2 16 {InitRnode } NewNode end end
 1247 2683 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(F.Nur)28 b(Susilo)1279 2740 y(7483220)2054 2683
y
 tx@Dict begin tx@NodeDict begin {21.71666 16.71666 85.84508 42.92253 3.01385 } false /N@M-1-6-3 16 {InitRnode } NewNode end end
 2054 2683 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.71666 neg 82.04507 21.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-92 x Fa(Bu)g(Darto)2086 2690 y(486955,)2086 2790 y(081328000523)2891
2683 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-6-4 16 {InitRnode } NewNode end end
 2891 2683 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(Ibu)g(Winarso)2923 2740 y(0816675362)440 3036
y
 tx@Dict begin tx@NodeDict begin {22.05 17.05 85.84508 42.92253 3.01385 } false /N@M-1-7-1 16 {InitRnode } NewNode end end
 440 3036 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 17.05 neg 82.04507 22.05 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-89 x Fa(Wiwid/P)-7 b(.Sukijo)472 3047 y(487164,)472
3146 y(0817267423)1247 3036 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-7-2 16 {InitRnode } NewNode end end
 1247 3036 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -41 x Fa(Ibu)28 b(Mia)1279 3094
y(085253890448)2054 3036 y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-7-3 16 {InitRnode } NewNode end end
 2054 3036 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Bu)g(Hery)2086 3094
y(081328200141)2891 3036 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-7-4 16 {InitRnode } NewNode end end
 2891 3036 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -41 x Fa(Ibu)g(Th.)37 b(Nanik)2923
3094 y(08156861272)440 3391 y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-8-1 16 {InitRnode } NewNode end end
 440 3391 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -43 x Fa(Bu)27 b(Supriy)n(ati)472
3448 y(081328450101)1247 3391 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-8-2 16 {InitRnode } NewNode end end
 1247 3391 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Y.Laba)g(A)n(ta)n(w)n(olo)1279
3448 y(08122745350)2054 3391 y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-8-3 16 {InitRnode } NewNode end end
 2054 3391 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -43 x Fa(A.Purw)n(oto)2086 3448
y(0818468374)2862 3391 y
 tx@Dict begin tx@NodeDict begin {21.77223 16.77222 92.95827 46.47913 3.01385 } false /N@M-1-8-4 16 {InitRnode } NewNode end end
 2862 3391 a 31 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.77222 neg 89.15826 21.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -92 x Fa(Bp.)37 b(Abas)27 b(Suhardjo)2893
3399 y(485671,)2893 3498 y(081328564524)440 3745 y
 tx@Dict begin tx@NodeDict begin {16.74445 11.74445 85.84508 42.92253 3.01385 } false /N@M-1-9-1 16 {InitRnode } NewNode end end
 440
3745 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 11.74445 neg 82.04507 16.74445 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -50
x Fa(Bu)g(Ek)n(o)472 3795 y(7435255,)1247 3745 y
 tx@Dict begin tx@NodeDict begin {22.05 17.05 85.84508 42.92253 3.01385 } false /N@M-1-9-2 16 {InitRnode } NewNode end end
 1247
3745 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 17.05 neg 82.04507 22.05 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -89
x Fa(Anas/A.Lamak)n(ey)1279 3755 y(085643173281)1279
3855 y(4333684)2054 3745 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-9-3 16 {InitRnode } NewNode end end
 2054 3745 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Y)-7 b(oh.)37 b(Suripto)2086
3803 y(0817889303)2891 3745 y
 tx@Dict begin tx@NodeDict begin {10.68889 5.68887 85.84508 42.92253 3.01385 } false /N@M-1-9-4 16 {InitRnode } NewNode end end
 2891 3745 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.68887 neg 82.04507 10.68889 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial Fa(Bp.)g(P)-7 b(.)27 b(Samino)440
4049 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-10-1 16 {InitRnode } NewNode end end
 440 4049 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(Ig.Ardi)g(Subardi)472 4107 y(4333865)1247 4049
y
 tx@Dict begin tx@NodeDict begin {9.77223 4.77222 85.84508 42.92253 3.01385 } false /N@M-1-10-2 16 {InitRnode } NewNode end end
 1247 4049 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.77222 neg 82.04507 9.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
8 x Fa(YB.Kandari)2054 4049 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-10-3 16 {InitRnode } NewNode end end
 2054 4049 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Putut)h(Andok)n(o)2086
4107 y(085221610549)2891 4049 y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-10-4 16 {InitRnode } NewNode end end
 2891 4049 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Bu)f(YF.Lina)h(S.)2923
4107 y(08157966006)440 4301 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-11-1 16 {InitRnode } NewNode end end
 440 4301 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -41 x Fa(Bp.Ig.Muly)n(ono)472
4359 y(484617)1247 4301 y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-11-2 16 {InitRnode } NewNode end end
 1247 4301 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Bu)f(Sugiy)n(ati)1279
4359 y(488074)2054 4301 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-11-3 16 {InitRnode } NewNode end end
 2054 4301 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -41 x Fa(Bu)h(Darmadi)2086 4359
y(081578898484)2891 4301 y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-11-4 16 {InitRnode } NewNode end end
 2891 4301 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(M.)g(Dary)n(an)n(to)2923
4359 y(7892789)440 4653 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-12-1 16 {InitRnode } NewNode end end
 440 4653 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -41 x Fa(Bu)f(Nunik)472 4711
y(081392704876)1247 4653 y
 tx@Dict begin tx@NodeDict begin {22.05 17.05 85.84508 42.92253 3.01385 } false /N@M-1-12-2 16 {InitRnode } NewNode end end
 1247 4653 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 17.05 neg 82.04507 22.05 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -89 x Fa(Bu)g(Suki/Damar)1279
4664 y(488326,)1279 4763 y(08562907933)2054 4653 y
 tx@Dict begin tx@NodeDict begin {27.77223 22.77222 85.84508 42.92253 3.01385 } false /N@M-1-12-3 16 {InitRnode } NewNode end end
 2054
4653 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 22.77222 neg 82.04507 27.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -141
x Fa(Y)-7 b(enn)n(y)28 b(Imelda)2086 4612 y(081082794742)2086
4711 y(Ibu)g(Supangat)2086 4811 y(081578043761)2891 4653
y
 tx@Dict begin tx@NodeDict begin {16.05 11.05 85.84508 42.92253 3.01385 } false /N@M-1-12-4 16 {InitRnode } NewNode end end
 2891 4653 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 11.05 neg 82.04507 16.05 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-39 x Fa(Bu)f(Sis)h(/)f(Leli)2923 4714 y(081392389679)440
5055 y
 tx@Dict begin tx@NodeDict begin {9.77223 4.77222 85.84508 42.92253 3.01385 } false /N@M-1-13-1 16 {InitRnode } NewNode end end
 440 5055 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.77222 neg 82.04507 9.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
8 x Fa(A.W)-7 b(aldiman)1247 5055 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-13-2 16 {InitRnode } NewNode end end
 1247 5055 a 32 w
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Ibu)28
b(Ig.Saman)1279 5113 y(081578085478)2054 5055 y
 tx@Dict begin tx@NodeDict begin {21.77223 16.77222 85.84508 42.92253 3.01385 } false /N@M-1-13-3 16 {InitRnode } NewNode end end
 2054
5055 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.77222 neg 82.04507 21.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -91
x Fa(Sami)f(Rahardjo)2086 5063 y(4333807,)2086 5163 y(081578778777)2891
5055 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-13-4 16 {InitRnode } NewNode end end
 2891 5055 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(Theo)r(dorus)f(T)-7 b(otok)2923 5113 y(081392025525)440
5357 y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-14-1 16 {InitRnode } NewNode end end
 440 5357 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(Sugiy)n(ono)472 5415 y(4333825)1247 5357 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-14-2 16 {InitRnode } NewNode end end
 1247
5357 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -41
x Fa(Bu)27 b(Sri)h(Budiarti)1279 5415 y(7480130)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer
userdict /end-hook known{end-hook}if
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
