%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96.1 Copyright 2007 Radical Eye Software
%%Title: jaringan-sms.dvi
%%CreationDate: Thu Feb 11 14:13:09 2010
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 613 936
%%DocumentFonts: CMR10
%%DocumentPaperSizes: folio
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o jaringan-sms.ps jaringan-sms.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2010.02.11:1413
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 97 /a put
dup 98 /b put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 121 /y put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B283796A9AD847424B4E6508546C36223A3B17EB82A56592F27FC27
F1D49D5FF4BBC0E16231807AF7E195AA7D0D01C7566243448B222D57B811EAE6
DE9370F84E207DC9BEC731AD6040FD9B804FA14CA264B73136F9AF34390319F6
A543D5D4D7FDDDF2F76651E557683614521110DEC1CCAC426117DDA7D6CF1B8B
7879B21FDC78BAB3C944BCDCD6A65B67F3692F0A8D5E36FB783A63D4FBC9842E
2CBC2720A7206F42A99AEC79FBBA92A27965AF40A71E05E4BA8D7FC58C828226
7A8B47241F73590CE626EDA930A1D18D758636250D9D6A09E133378CD725F586
F40320EF186DDF87AF8C2F5470EADFF39C60384EB4DD859794CDD6E4AA8E8A7A
18E246579B5FD876A7C0AFB4D935B09F36A74412957D9BE1DA54DAC6239E5574
A9AB77DC4A6CFBAF23EC30579BA578299EA68B0BFC5B9B4EAA4D3CADB581AC57
6236C14F8F8D56406DC427BBE7913BA2990D22F36D646D3D31A6DB69512AACF4
0A46538C40FE5F6D369871E017069547B6CD9793652C2EE8EF391B88DC95DC58
DD90F27F47D996223903C9A02FB30DB43963F1DD6EAAE43F5E43F19B54FCA3EB
114CFCC68A6B5106C697C5876011047F6679201540AD102C571BF5DD26AA443B
6B73E80D855F5EBFF6A5BCEC484EFF7634D31618ED926015CF883D323F319D95
D79BEA4091291DAE4ED9091359807685D980DDE8915E8718CD2CEA9D364B2E4C
3DB1B8C4238F51C1E63C26E8A0D90EF1D4D2C9B4D52AFE11892F2CCF26DEBEF2
20ECC90AD1EC92C7A2F4D1A838F1F3750B8A5E51E58568B2DE12D36CAB055DFC
7D065C746CE7DAE1F2834FAF9CBE539EC06CABC6498495C913CE0EFA7FA87088
F7376129F3F8A533334B624CF62D9013101548D93B43BA92D6533CA56769149F
2A1B8CA40154EE515385DEC0F987AFA8E058647D2E3FF551AD08932C59B0BB2E
AE0EB03749B40B6A4B3B94F24FB13CB7D83968F3F151438223CB1115379D36AC
F35CC99FD1C9E059678560648FC797A6D22500F8CA1DD90BB7149E3C32ADAB69
D9AB35CE944B6ADE05782CF731A759F68E9791D19CECFB26421B070877E6BC65
EC82F51B81F2F939694DA32E41557DE6B7D055BA949C01CD34FC9B62B5E71B22
81BBED290647C1B584FD784D9CDFFF89F65EF025BDC7838AFABD55154B54F8AF
803F70491A0641ADE28AE83760C79C08C1265830384BD8F2F84A03D23E58318C
B97C4A8769031504B86130914B0AC56B484C481B4D83224B79DD63F00985881E
8347FAEA451BB8AF0E10F73A89A706891F78F7380CBB5E333BD4AFDFBF2D41EE
D27039C40D9E1187E7F798E5B37E12F043AFE53A37D75A83BE3B87A81C6EADE3
7595E76D9958807993AB1C40E5C7CCE314026A46076EF08D7F4816AF4DC2D5BF
403C74CCA2FBDBE07229FA90B755958197A33515523233AAAED7CAF4A45D6417
153ECF720449E215CEDF74E0E39FF13E29AE0F9C229608202BAB33070A6F9437
C53729995CCA785EE521B5D5389F633CAA69A78FDC67F70E97922F6F81CBFFB5
9517FEFFF7D2F7F2797A4577D6C20414EECCA5FB7E29EEC6520F26688A18CD0E
17059155E87968D9F196DD1E3302A64218E9DCD6FF12F649F3BC4BAFC6507BA7
FB100FF779B3240BA7C8BDBBE5A7699DEEC2606AE5A12D9B86EF81B9B693C658
C010B611DD22AC0181ED8E00C650803C5C8115B75C4803C8179D8874B28D056A
F70D3C23A2ABC674D0F1DFE1F1E7FDA252A2C34537102B227FF50FDAC0C45401
81774268AF4CB118BA6E566FBF91D0595E1CBA00B0F241A924B7F2ABF018EB43
6C696EA4BF0AA84655080D58F6DA5557BE6D5E0026D65CB90E6C4E04E3D86AC4
8305C546E82C12105C3A9F463C798B13783167DD407373D7B96144E9DDB71F05
A5A95D642F36295416042D3259D3D00C0770C0FA05F68107575262324ED07367
088A6DAE83A5AD05E624636F520E280987CFE0A2EAC66A3BCFD4E9259333D70C
22F19831B4151A049731C12604A3C7B41BC108A47AE03F9A42DC90B6D71F7795
5AF63AC645B2DE43C14CBFA8F6DA0074BE27066C7B5D4065372DCB99A843548C
D7BAB388EB7DC48CD0CFCB6846D7B87C86F93DB96041244F6DC4F7640BAA408A
28023FEBA863B62C9A087BB129B94901FF1B09FEE5CA4A705B4DBA210AAA8697
95398F7E5BAAB57980A37833A5DDE37DC22AEFC9D4542E9D65F6243B08DDD158
6C4D9917EB9F25BDF6CC0DED0C29201AD30781909371BC83DE771660D4FF1E07
052EB90D8F31E2B828445DDF3FD414E451755DC91B2EB0E39B7E4E7BBE751FDB
9698E207CBD4719D96FCDC39EA3E61DE6A4ECCFC5143114839002765E858AFE2
E1995F39906AC2ACD7B2E99362A26076D4E3BD1FA8AEBC9E42AC49449D813247
98801DDB6B4BCA613D6E272159115107AE9732C166BFCF611742C2811F2E83DE
DD4F37C33E2CDA617E571C5201CF5520EA2ED8464B511C76205E38141E9AF7C5
95AFE3F5A2874C1B6CEAEE28AF78C18BD2CB3FF02558E54450583FB95CA056D5
716C79477C0DE743D112B658F9172209E75E69A10AFFC062F980E642C7BA9DB5
24D59A36D1EB18D645715F83C94C9D0603033AA0F1DFBE669AAD026CBF9625A9
51B76D577D9419CD0EA3E3DF1C84684EAF994C8B749934774C964DE2E703C539
26F032F42525AC231B6FF51351E81C7DFFBE9E833353156138D8FB631E8C79F8
DA4323B936F74C5E2FF50DA6B9E7544FDB557187B5E9C512FAD5312909382B6C
316DEEEC26A270E93B170CAF7F03AD633EB9FC013F722A6433441177A42EB501
BA99D138854F8C6FFCD775D63FAAA2DC03D536611E1CF44F018B0CD6BC79894F
C0E5ED200BBBC5BA2C5B25AB8ED4555914E48EF8457229F0E44226C811B1F589
981237BB3CCCCE4617574AF56EFADA788BB8B82BAF6032FB22AE1C2958FF1564
FDEA97C76B0D3F092DF430FEC6C7E494CAF180275788DEB22C38ACD9F3EFAFBD
C6C03CB937988F60C06007DF99FB3B4E28EF85D05018C34FCC68662E7213D06B
109F45AF4B79ADD1BBB0DAF756FABCB6D0809A27D1561440BD2A13AC5E947618
7BA2902B2CA6F7249A2C9ADD1FF1767890B44EDA43EF048561703AA19387F88F
9978DB016871E085E277FA3B4AE51F63EB9C991DC62F2029C01176B7B9CE5645
1CD7C30D6F9E9686A40821FA9F8EAAF7B3C84013EC1E6171472EDFAFB663F5DA
7741BFDEE228E723859658E669E17F80C005A0B7EB4328611B59680AC86A9909
D50B812FF694414AE7078C519B4EAC62288E4CA15AEA67AC16BF0C397B2A96E6
B68237B67B5C11F09F130FB0F7143850CA381DDEF4CFB2493651025EF09CBDC0
2BDDC41F91D0B660313EA9CF95D6800BF4BA68EC79BDE114FB81DC02A3ED8147
05C0D3F58B9BAB0EAAAE3368CBD1D80B3148373464082DC9B09FB48AC55E0E24
5EC568FAE013BD401EEE49DCFA32328F5D803B50897121586DA6C940DDE62A8B
EC0D731B7EF9B2B2EA65B31D7DA7D913516D504B7D19BD1D5FD3429287FAAF0C
571949651C25BE2A0D0BE4A017EE8A4A1F48301C6C2EE8004B62E03E3F742822
76958B657F48FC50283F549E3B8DB1F5528C61479E71C80FA4D2992C04198233
531867D19B562BE612451E6A670DF7B4137D7E7877B435047E6E81458D6E1233
A5CCBE264471E74BF7893DF0BBB060B4A5680EF244D5DFDA30A31B4F7C98C375
E3552D94992B3CCC3C8ED0A0E82CAB1ADD9861EE2904354743F84790AE63966F
CA5E559A68AB718E6442B15FDFAF76D7797DD239E734D13D38A564293EBBB1C7
11C297AA02C19E9CEF7C8AFFD779ACAAFBF2709E1023D48A650A8AF068CED4AA
EBDBA30F6A167FC513DFD3B9AEFC6B59C42800AECF16F0B7DE9CDFBCFDE1BDDD
2251B64C5551A18DC3BDE96439A32C818D637B50C468CB8707B9FDFB5BFA2D21
C13B5EC026706B0CDC446CD9F2E0674282766B60D61487660C6D16B7F7CC4004
35B7AF89360F243FACEE5750F08368F124A80DD1C85BB5CAC2D9F267C776739D
CBFCC4AF671F669C5654067B6B70EF3AA2C8221D3307E4582082A87D029AC35B
75C17D0A05CD43B40329CBC2C9AE4E0052FB13C63B37D6EF64C2FC99E355D0D2
8999713DC652C73E646338BD98169D329D210244214F60ECCF4035915617AD38
0306BF1EAD3666D452C3870C36E54171842A2D664B67FCB23E2BDD3EEB20F49D
B2D7A7329BAE7ED3B91C679FBD85B00A40EDB843EDC72E334710FB5C6F4A46F4
70C0E6FA7256D79463D7BBD4E775FF19363D151CD09E7F5409D3E575412651E0
42DE5FFD25702727F485929DAFEAFD29C76ED0A3A76CD755946310EDCDCCAD86
C8BF3239B1AB4F0E6E2BA5305F3DA15DAEF1513B120CE0F5E43DF3E7FBE45D5B
DAC40CDD3B03252AA3FF67175D72D7E642AA5451E2DF268A1A8EC7DA807C709A
06C3B8BA10E18C600F0AF624B4702A2272EC5CD0536489CD8D3F8A871BD0F5A5
A6DFEAE7A9F337F7FC436D50489DFA5A0AAB01A1AAD7833B424AB721BA1EB1C9
5BCD25C641056AAB462A6EBC8355436C13162DD9CA8D396A31E42A2116A6B198
E8A08B4D13400D993662F1CFF779475F01A99C6710BB6D41259B0463D91C83F8
E118508BA5567191BF46450D65739B842EFABFED864287A1B7A4FCB0D90AFA25
526700A356AFE4141B981FCF38EC48904F8CD204D06EF45B583D80021C815B88
9A6E0C187B191CEC5AC474519E9B30042CC581A4D4BCD1A149FEE2BE8296EDFA
95FFB5F1AD34DB7541D01B82A0A7BF1DB122DB50E1231DD1E127EF44742DB367
88A9763ACE0D0A4CCC8B62E5A4A628A7C85F419E13389F03BDB1C40E9232FC84
F51E04DAC275F03451124527CB2935DC08C8D6D41C8876715C05196AC9D231F1
FDCDC0459F472A1A0732D123B343630039B5C4ABB3C5D5C48D54850BBD6B7F8F
DE711325FC0C9F58B3526874D6316015B507086868B46FB111E6371B6DDFEC79
B6B5BEAA375841D9EDECF7090859F1982972EC88F4EDC4317D36E82A4C157323
EA7216FAA2F108A092537AAFF2BED86355F26A80BF9764285C08FFD5D99344CD
B9AABC8F47298356393FD57EDF7126EDE98FE8D4F98F1A1FBA943D3E44D4C675
4DA542725D0990EB5431D911097D5831307CE6D4EB6670CF123D11B47A7D1845
59EDC0A6705FFBBF1CABC3F49E924A33CB428E338DDEDB6A779E41127E7C6550
E5EC055F1CEE3DA3045D9775FB232C36863879BFAD2BCD53BCA7AE334DF181A2
2DE922A7358B52EE227FB8FE26AABE95A4364F244B960F0513F921FF44E5E3BB
EB49ACA0FA20A60DCAE9294C5B61B83F6D5F1A1DFC394457A07A4B0FF5351388
95A9DDD02FD787E25AD81B77A039266C0AE2CB2BCF9984FADFE67FCB7972478E
279F054A0BE1B64174ECC729A7B02E7145A251BDC427A8C1F61B50B66B9DBB3A
91C965BD48E9C908DFFC64767C25250C4D802E5946D48CB2FBD75152D12DBE8B
B5E93E3E27903764F0BCB903F85979244ACBEC1F9BF621B5DCDCDAA9E7C88213
4765A9E9E6751FEBBC2D74173E0736142F07CEDB5EADE679A4EB87ADCD2C569D
4F602096D53767A6EE334446844D896C391D03C0A669F8A8F763A11317E2E1E7
C39645568FCED158A59B0C3990A754EDA8C5E44AA5C1700BA7A3BFC4C5DDA311
A3FD87620B52512C6BF21136C15C888371F2CEFD8CB4494D25C1F2563BE1A273
63F22C10B02FDFEF351E7202C3C1E4D27FC9E4193499711239B1BB82A76AC0EB
128E81E1B7F2D4DC086F8C8235D0C400B2204D2DFA3B5CF24759FC4C0D82B966
E774EF9D5874998837277D7142D7E50FFF9CB3E198905AE97C09B9990D85B193
B63E77DCA4E48819BAAD001BF12A47755493DE1F6B433A2A493583C7552F8DDF
62B5A2751077C972F51EEE79AF80BFE1C0BC198D683E86DD365C3553EDD570CC
7CE5D1553278A6268E5E6AFCCB6A596386521E0E0EF549D631338A32A2E5BADF
38E3E642B87DF6FE86CDD29D7E4EE9D9871CA2CE4B71B4BDDAA7D7DC490E70C1
4681BEE3410F4922B76969939EB586839362253C4E4E8C9427CED65D34D539BC
60815BF1143F0655219A602BCCAD13AEA95F60FF866A00C042AAD3980DBF61AE
C0C8B19505571150DF05C12E5FE7A2043FA228D2B67826620B2E53302F02ED4F
D1EE87B16B1337770DBC8ADB20B5C93848E622B037500C2C3CEDCEA31E5F3E16
53B9B9EC6DC7DBF25E81DDAB14BED63B04C92521C9C6262824811A679BC81637
AEB4FF34E497400367DD37D1C5B8D2C8E2FE07B3193A4C87FBDE537097F27A5F
47433FB46C9181E63256BC3BE7EE4749AB5E8CF1D73933E7FCB5922FEA2BF485
0E13C3C581EBC3C7101992FEADA1AE6961E7B1BA9E0FE646A0240B6E7F6CDC90
B7949572A9F389771ECEB5CB171B1BB70E4695E5B54BD42BAF9D5E631C5ADB64
EE7F0168D6C4E94B6A72C38F56D995B260ECC858284C652F161DF5010A2B7948
46BF3E9BBBE445FFD1B7409527180BA2B8BF4CE5599EEC683B23B411936E6898
6E671EB193EDA12872EF551C3EC89067E427925DE60A4EB95D24BA85D0761B9C
97AE7443EBDF44EAB5F242D64B0FB51CEBED953E2C72D9AF66812859668ADBA3
BD963049FE90E3AB34FECADE0014F5C1422831ABD037052A98C13D9A3ECD0FA8
B2B0EFAC8FA7FE0655E934F4405DDBC31993D780DFD0FCFC9B94DFE01BDC9801
C36DE8671EEF750FD698751FD56B4EC3B2545866AED81772727ED4979B74F442
9410916A8A723B746BA436891745E7E9F16398AAC57776A63EEEBA3BC2C9A939
F0D761A325BE6E6AED5A183ECA4E25EE9031883047C69DE4B409459458C07337
A293DCB8E2371A036ADB2EC1A4F309852100A2D25702D04EB32AB9A3F1AB04C4
E4C8C0FBF22A35AB681316832907174EF6E837ADBED45F5EC67F160565BAB096
D0FE8873FBB3DA6A598A78800C63AA7ABA5DDAA0428CC95AE2F8122EEFC044BA
B9E7D5E46B9B371F75C42AE3667B67ED311147FD96D4018AFF43BFD5A623D69C
E1B0F6B12EF9C49AC3507945E71D43B0E5EF0E74E86DEA11F37814BF518F9103
42E02E0AAA804E90A970EE2CC46BAC24F39D7F3E60B382DACEB72B3097B7BE0B
EBCF778E154FB9DF57BBF7BA34ACDCB9F91425B57D79F9A15496D9461DB804F0
803E73D6D4A5CCBDABCFDB9D92F33748430F8B938B49FC452DBB8ABE91CD9066
529759096BFE61A9B78EA1E3FEABCE8C4C2FBA64CF64DA5995415FA95DDA4890
FC1A8125EECC81F3702FCD34E6452ED67C2798777A20E2BE57AF1A59303350F3
9F99004726C6DCF41C21B4C4CF9B6F66A8A13E5FD8448722D5E88F199A61EBFA
E528F9603ACE59DCD1C5235873E3115DFB0B025D4421E2D0173D61854AF21970
014F8A942D5A4E81F1FB3E39C46358E855D80CCB582D3D8883FDFA0EE824CBFD
B3512E3DF052A8D567D37D9DA886871F84534C1F18E93E61E118BB7309A4330A
640E07249BB65220D0A400640FBBF1C4C4417352F7EDE21CAC148D7BACC560CA
17EE9C207B9AE40A89D93B5B0602692F7A16DBD1560436F23A6641610DD94A2B
29693C1CEABB4A63E87DE02D74A92D34B1D0DF1313C0739A3AEAC09685A66918
D09B3AAC39AADC5601D5AE220FED9EEBEC87D260F9E44985501D8FBE241F50D2
5D0D822EF05ABAF4A139CFD7040722DD355298C2F0E60241C727D1121F7B946A
DC1F10777950B0AD5D98FA40BAA9F9D24200CFA4A0649A2143E89D26312794E1
23E2DD69D7A1EC39E53BF09677DD695AECCA0645FBD8336987A0B70508F5CEE2
8FDBE7DA8CDC281C5ACE74BA1FE43CD3D16E1740C808F4DF4254D3465DB35FDF
585D1E3FB93E4922B58FA63C1929497E5A7B4E6A236E1DA10923460B382D051B
0F848B4701C733AEBC3B737FB8F067DF873194C49C5BD45668966277E5DC4BCA
38C2CBD94762951509D05AF19E5C67655A8FC5862ABBC9ECAB1C16F06BEFEE51
FAD0F5DCF1398394E325B439885977A3940D4AFBC6244D38BB676CF0804A73EF
C93C98285C36E5DF198BD40BFAB0AE914692127956D95524ABACDB6072D6978F
04B11BF97C0E5A8EE6B7F2A27098AA8602CB86BF04FBD9E07CB858B3850B22E7
983008E2A76E46E28AAC510E58CAF37E881662770B21496819FCFFF1EFD4EC1D
409B06F7D0A48798EA35D7D7FE37E897D8AD96974A5469E62CEB4B5A890469CB
F1290C2F96540A669DA67482B7794D59E90CCB4751DA92D614F6B0FB36B19FC7
911AE55AEC34B6C95519F9A8DF647F1C0E3908A4FF7A0CA89B49F7286CB0BCF9
F2BC7BC685F5FDE5C05B4DB0BD47EF8BAC70F73E073DF93C2041AB60D0809E6C
A3A373460DDC3199DF4EF461F961FC68B4613D7A858FE9917EA4D378ECD34A3C
4306E6F9A240A66861BB7209D00870160BD467CC3E0A9DEDC3A05427D8FA680D
CB2E5357C76BDAE2A1B358D28434BECB781D4DCEE4DAB478B938D73A8AAEE504
5408D80E679BBFBA41453659B30935D57463FFC5B84468CF7E0AD4D198981BA5
D479D57F71F7A5B66D1F5FE2A6E7FFC577F51A51E745BD84736186A0573B9D96
E1660077D7651DB6B1873C16101B8779BBFA6F179FED4C937A6455F3A1FCA10C
2933A2C37A6826C79D64618D6B147E8D8EAB8DD666070EABF6C683A93ECEEA7A
4E71B3BBE557BA2F3D76920DC199141CE151AEFECE8BCF663610BB3F0C49ECA4
0B3A5698413E2BCB1085F9268593BFBA054AB71C0D2BA8FA8FADD9E0BFD82245
AC6927ABA19373DBEECD1A445B1070836C2370BE099BF6BB939CB3B9ABDBF24D
2F9280ADD3F3263BCA47A9394001F2C134ACB41E0460DFFAF68CBA385978E82E
76186198459E3A618E0E1F25465B99694BF7EEED9BD1BC957F9C74315F534ECA
999CE3BEBE99746AFFEE089463263690EC64032A87172E44CAA448F59351C0C6
317102018B299BA3CF8DABC1BBC46DEF27B5826ABC115ED964EA16D79199AE33
760FC298624CF5C4E814F878563563F1D13000B3801223712AABC39530A7763F
98206A01638A60E250471EC15567A67CC8C623F1FA4A10A62FF1FB5B7B49FEEF
98A28509C2BA413CE913F6605D2445AA6164CE6830741F28387180985281C75B
83A17314E6034006517602B05B5F209A82445F45670423D3A44D5781E33E38E8
5F36D57766D7A4E058CB025CAB239E59D51A0C1ED6C4D3C1936012023E5CDECE
35B6C594AA9A3349B548E2E8F7897771BFFF8A479255DF92766094FBBFB84352
DF42637B6D2DE3C23B8B407B22670354572C1C87425885E8139492F48FB3BF99
05536337F56CFEB098275E8BD0EE9ED2553FFA239616720CBD420F6CBBC9B69E
83D8CFD4D85B87AAA333488C47098E2BB3E9A9FCD12DB3DF68730A91838C8EF6
BB5F16C427618638822A47B56A36395960E859EBD549CD6F97086CB9DD18D006
A675624770D8FAC5D16531B4C25841099E9FCA72078D50F5FF0FB0770C747F31
E00D3491D8027F60421304A37A93E050854C10D117FB91264394B12357811250
2F01839F23D92241DF6F20070B8B4BA2EE8CCEAD5530C5261EE7DDD56C9BCE86
3CD385CAC247D2675037CF74418DC3C568B2483EE4A19167E53613FAA89A4037
BAA683C93F8549CCB835ED9B960B76F15870DEB3E5D93E5CA69FC17F27DCF295
555293E3A79F44FD265A4D2656BBE8EEABE144C322F19984D7C6F4EE3D9ADFFD
8249F98A6D76D54B9237B69AA32BC852364BF044EE175CDE3D9D9FD30B4F661E
CD52D96741A6D69191D97D1F4B2A742AD5AB6E434D24573472284787286C1397
39BAA4D9D8C636BC83815A9AA5ACC01EAD0FA981E0C259513C29F43986442351
D511E20A8436DC159BD8D2BACC6CA051EC23121C603106874EDC378A79FD354E
B60974BBD350D36C32A4E8639EAF5C9508C98DF27C5DF4284876EFFCE44FF4C3
9A3D85B42993D4805BE7578BC1164AF0179DD765CB4A648714C1519954D3ACCF
2823E770BF25AD1B975331955D80F1F96F83F6366BA1A1CF829E9B2B85BE58BA
C8510DC4971FFECFFC7C246E98C3955D863D3858519075EE4BCC3D5268BBA382
F6506D7B323AC9E595DE20D3C233070A12AD2681A298DC7BE6FBE9D24ABA61C2
CD13D7D1F5329C7865741C6CAB97EC08A002CB6A0F39B3ACB7140077925F17D9
D1A9594C33A5674AB56B1D515E2110DB432FF67643BD7D37DEA85BAB5D00080A
1EDD41DB8570DDA8D33B4D9F85B2F65EA57D16EA423E2EAE2BA6E27B446C7791
C33224198864D21E57C329B8E75CE52E657BC73902B2C58EC02D0F86D3EF7D20
AE93268693C7C5C5FEA12B7CF47CFB67A8F7C9BDB133D93863CE29E9F78F3C8F
FF607EDC011BC88BC5C0B7D1387719984ADB72E5B1B1821D817FC234615E65F0
22AC01636BB8DB8A9B29303B4D4359749E130708CFD37632754DED674938B10D
E14302E809699C364A554A5790F30B5615BC4EA1B62C38835C46710EBD8E7FED
E616F71C716E3A275DD1AAE39054F9323250BE3DCF4A4152C918F40F168A8B4A
DDEC9D4AF0C1B13F3E6CABCAFEDD897EB70066F36411D31314E7CF91A9ED0209
E4AE5315D512B06C186A94049C23B543A010D959963694A84474EE8477E21557
C2F0894C959BE94535B7F5B70EFA9D0087252CB74AF7CE88001421E75C876014
505FADD641A983EAB908519762B15DF01EDBAAF218F915831E8D4F4A43969BC8
BA5E38DC3F1C8BB47D044F75971ADAC0B2035913879199C07970E3D90576445B
2A53340CD334A853C5676CA55F62E04E289691E9A73EB9BAF2287F1500D41B5B
7A66B316C092A0D89C131FADE2D8E316EC4A1BE70FB53AB2D89D2462517B4070
FAFDAA69B95ADF05B1DACF68C56A84F4D61970AE0E8E9BE789D1AE0F3F9795BC
9544AD362095FC0429F3895EC677C9912FFD7B2741BFD37F529F9E29D9AC1D01
1D54CCECBEF351C0DCB963E0BE081E0E370949BD78571457F8FD9084756FD633
A0B5803F5B028EA5200D1851F344560877AB8311A16022E8B936EC702766B4F7
350019278158AF326748A5479458E86CE33155B910A5F76B358B7F9C2DE6A39E
A8CBDA092F38F8CC8916E26307045DB924C3E9FB3F9DD618EB0807FD238E8E03
853E1106709278C76AF08D3D46403A3754F4B0FE758E918B172B5845A03500C8
941D3AEDE40CDB19C6E045E28CB4E0C76AEF96949797CCF14CFB44C07C269784
08DDDCFFE92AE8C5EA906B85A8459F8A711A2A6466FBA53B5119F24E6F1D798E
84FE42DC79D5EE47FE1F37969EC7B693FAB1781F6F980CDD098B13EA39983B80
3B69F9FA74F6885E74D5F6DF66A0C697AD54A8F641BFF4B7FF32D846E35ECCBC
B8CEC1E299F7A9EB39135F88806EC5C27CC4633735CB6EEA3B671188BECC6EC5
D8620D1803F908C05007A63BD69CA557C97A83DE995E24E743D813EB909D1FE3
3CC1E65007F468418DF3795D78325B2981DA5B01A420A8E7C6331CBBF739E8ED
CB119C7F6222878C77CE07218FDE4CD544FE87BDC895B242D279C70CC1D14D70
45BFCCD26E2AF756D05BBA7712B5A7F264CDF045AD32A451EE27C61687A7B4EA
27693E89E55F76035756D08BA0668CDF17776763DF196C8A72B991B0727F7E5F
D9729D1BCE08753733A90B19D9CB42C3700D0CDC6008C33D5EE600E9015915B4
9DD86277685C20071FC8AE2670B2FE5EACBB9F62947B186D29636ED12DABC1A5
5BDE1BC34B4D2DF5774504AD6EDAE68507E762B15B81009A49C0DD0A2E06320D
E1B132CED28F9AAA7E7A6D08CE1E7DE794E2C317035B1A00E661D03F59A49105
4CAF5E7436B07B0E6C78CB4028A5D738648DA721E6D034D2DC6C1BAFDAD8FBDB
5A99AA367AAD0E422B39FD2F491BC6F454A05D51E9C597595BD2EA40559E94D3
BB9E4AA59F4E3899EA06C9D01CA0915C8883EE6DFC682D69114BB05EF6C80F37
28B2BB5D85F25A5AA2ADB93F82262CBAAF3F2BD4704050950D134DEB60D372BB
BD66155A7ABFBBBBF19E0B33779EE4FDAC39CBA6D8DF2A21430894AB4BC216FA
23BAD372A7618C9ED6BC85F1873FB9856FED80417E6554D947ADD1A5F6B05447
75F236DD9506A921039DB3799D7827B0A367D166C58607A26E3C49575839656B
ECEAAC876E7A6A01B98E26564F99AD4E4C9FBCE9D35D7A156356EE48C1A24F03
E3299B3237DFBEF1D80385AA1D12E005FA8BCBFA8A3CD19B5F673A4889DEBF77
B2A93D61E1155FB6E5C6A75BFCABA60AB1C5286EBDB8CB9DA800C05BC7FF8B29
8F4FD6C9A0663C6216E50554CD60C1BE47B0DA15F8D8D728653446CB5D4CBA29
01C5518DA6BFBA77168351748A7E8AA37C17AE67FF646EEA0B45F36B9300388C
E94610EF96CCB2F2145010CBFF6AED1C763F745EDE77C221AE266453A1CDC259
FF895888B0EA7994E1845A70AD650638AB9778F7A8FC4A666121AAA335FFCF47
41EDF757A5ED1565D7B9764B9A6498A8272F57BD83F5C403C5A949E958369CC9
FFF45390608972F5BC0FF5C2A92FA8E1B357D6F09D3BD7C3AE4E34E988D6281E
B9DEC52B9A960545971A958A0951462768B7C7C7B7AB98D8CEBA5752D7150BD1
26C06C0F22418923D0A5B418ACC8CE98867F8B298D442F2CEF84C378F77848D7
03F01B4A7A34853D22AFBD89AF61797E8632B7C8413340D0E75A92F0F2B961F7
D917D0403C71BE0730377C8C5FE464055B0B9476BF4B87DDC712CEB44B8BFEA8
4EB2A706B675C5C095763DC918AD1A543E4B06DBBFDD761F399525BDA4F74B5C
D0D631131382A1D08DBAE30B75C74677DA871E606FF58C94ACF70B3932401D2A
36E8D430A92DCC285AF4D17D31B32D7E6FCA6A20F1FA014C3BCE0479E8672486
D886A96FFA33C89B9D56A1B3489DC8F6536123C9FBB560D9715D01B2BE4D6CA5
F25B41E8CD09E6936994CCAAB8677D4FA50374C2898B5942C18A23D87D741D9B
331B40C6E69D5C6B35FE5DC506574FDF975040DC0E320B2717D1758C8C0A851B
CF4AFD635493FD4FD1354BEC22BFF3C29C4D2EBAFC04EDDA4C0183437B8D9FA8
83C266393CF2898AD609FEF71AFCD7D6E0A0527BB8CE323862C46255CA20A8AB
DE829F68F5B51099533BD6B3BAB0B7B907DAAC2619174AE2FB350EEEF34A983C
734A25B5097E9BC54DBEA01BDD8BED7CD4E80D40FEAE1311E227679CA2EBE1AB
736F1012AD12209AC85AB5C2DB1BC70952BC47DB73A01F2614114EBDD58C6ABE
1CC7F0288DD7DAB7E8AE5DC2AA84E6288588CD3BEF50C47BFFC3024E4D1FF5B3
81F316B3D812A983995450EBCC0B67251F93F5879A174A0A8ACF717A7F97D924
F51490558BC450FAD2D50354AECC39CD74660E2AC835B7CB89190D42C61C5285
F6B75BF783D0774090A5CB52E5494A7032DF99F713BE7C218729609CF10A6643
EDB06CD26250F28DF0B615BF29786BFD737122CB9BD20F4FBAC5A0789575713C
6668CA1133C5DA88FDA3447F62B15CE8DE91436C3662A31C20EFF35693718FD1
2EE435232BC9885FA9C174606B1F15078715B0AA69B25E3CA7069434BB902E53
7F9D1D68F1604FE97FF0745EBD61094573C79BF6BCDBF646E1275196B70FD892
456FD4A63C7303F0F7CC44F19F11428DFA88A18D14FA2FB05E38010113503BB6
D94A8668AB8FA88F870A52055C9B7A65F06C1F9E4631BC5FFF28591110A22FFB
06F439ADC669BB93877B61A1B960E9C93C893021E943FB7BF96838B0291EE747
D4991760E0901158CDD09CA872D40C3205015B5D85A110A0ED61B61EACED921C
0DEE0281BD85362F3D9C20203C1F66AFD102DBB8A80E77BB85D04984600E6BC9
86DA7EFC240D3BD7CCD2D36CF94D72CBBF7FDB10C21F4A0418EEAB2C9D149981
E13995640303852A9FBCDDF12ACB551D11B3DCB75CA9C682C111B052700B8CA7
AAF903F05F7F118069564671EEF656743C97E7C2C0A2E8A3CA4EED7D098E951E
2AD951A4422F19508EE5D64B8CFC9DA9B2B7C2DCD9A999CC242279D840485D72
0F8B7607EFDEBC5E727E96028BEA19A4FE1C95697805097828169440CA307A65
6348717EA19E72C2E273F50ED22A8468E4005898D3C4A720B64F4A7ACC04349E
9A0A07C50787F5D5DAE904ED69C50E9C8D30D21D200CD561B7B52B940F1EE232
7F3E261A07A9ABADCD954B0AD33718EC70246627563EAEC69FADF9D9D7B47EFC
EBADFFE5BEA31BD4E881D87F46309C610D97B045F526E370E898C46ED0007E05
B7CB37795F6783D1A727AFA02157343EE14C7BF1950D74C257595C6CB001A59D
127C860870ACFED8666E4CD14A5CE8B578BFC664620315933B0A134F6B91B27C
0E18738939DEB2D25B82D9A69E51104BAE43A95C0853C5E2DC4B509D5F6B01D2
C5E013F7033F1C869022155054866573794F7C215A8E2D2ACACECF6E835246A9
472D95BD6599EAC473D041B4B8B7EACAA49B2B376BBAAB361E687885815FCB0E
233663E31241E08539589F181DB27CA3A775F3453EC8530268E0BAF7BCE73978
A5121B8065C980EAFE0558DB9373435BE08C4A523076F318A05569DA32F8B992
54EA2DA23317D84AC26417CC522637D7D99649987F6DC6C1A448D80481C40EA8
8E6877132D9FDABC9A673E2CAFF7CEA535CFB87EEF34CA008D7B93F124110FC6
EE3CC9B5E6B5B47E326BEB25AB04108B6ADBD079812E822B9C330734D42C90D4
F1363AB2F718FF41033EA4488D7F62A0BF411154765F9566F3DDE87B274AD799
5846FF702FFD3218F836067DA2E09FAE059B328E736F0A49EDFC8F875C6EB5C6
0AA9C0B7764A64B752B1BB3D7C39CCF9CC5B2AFB07AAEAB3A62382729C8489AB
4DD4D019CACAAA87138057643A19A0FC8C43640CA86AD90AE18A12064D29A2E2
4A93A8EDB606ED488E169ADCA1652A1386DC82DC5E0CF676675ADA5868A67F85
BB9358AC34E4AAA24C359E57EEA7ED2F38C2F7B2845ACF84FDDBCEFB15C1378E
DF53B459CAA6BA426924E56096F4CD73217831DD2DF1C99CD823A54B4464C1F9
B5D80254CFDD2377414DAD3F2BDA59123F8353AFA2F9B582CF0B84D765427951
52016375FE9BAD42CBE9DA0B0D31E6FC0FD85417D861A12BD48E90E0ABBFE5AB
77DA04D3F36936D04EBCFEF20DDB996A757C7D953ACF5457902DEA34842D077E
AC0668CF638D5E3A6A9F8C240884C2189B2020B9F22E776B10348DA2E7BA105F
9AB06C4350710C3AD7B2BCBDC91E188CFB4F46E7D4414651378279E74553E2CF
B8BFEFC1923F334E8F73DD8C8BE0094E78730A28BA56B7D221EC4C1688D709BF
C44D92290B653B177795F41C5E5226AAD0AC15EB373BCFC413D484A4EFE52BBA
80623DA883DD2EF869B6FF25E12157F4D9B209D47BB66B8453A8D7E0555C376D
01FD609C5DFDF1B2A928EF16617DCBF55BE93D7450DE1D45AC8D87BAABC765E9
3F0E1FB8428356E8215B5A15586FB0197D94C4AAA012BF043992C69E36BB28DD
8B3AE69811D818DB170757B63F382A39F66F06CD78459FD8C1338B78B50668A9
54C67E8708693CD4DE9747D3340E190065888337C3166115BF950619244EADCE
5B88BC0F668382920511E66D3D595F9143D161D6B672FE9F636B569EFC0F551D
F00FE74CC6A5A9E0786E0C2856FF6A5170F1D6D82F6A5DF6E2395FF20FB28AF7
DEB0D00E1B384E8E69A73D5C8AF363473278B7E90D7C4A996569606CB4A3C094
F1DCBA156002F77B1D97113602465EB425F12CB85879B30428EFB8962C942B57
95EACCCCC5B3CC835C3E4CDAB25278FB126FEC919F64BD36042E237614CF402E
4C6CCFE6AF27417455A938F97B8EC5AF1D87068415DABEC62506001E11415DB6
9F154358
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40090613 61534431 1000 600 600 (jaringan-sms.dvi)
@start /Fa 134[44 1[60 1[46 32 33 33 1[46 42 46 69 23
44 25 23 46 42 25 37 46 1[46 42 6[51 62 62 85 62 62 60
46 61 1[57 65 62 76 52 65 43 30 62 65 54 57 63 60 59
62 7[42 42 42 42 42 42 42 42 42 42 42 23 28 23 2[32 32
40[{}62 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: folio
/setpagedevice where
{ pop << /PageSize [612 936] >> setpagedevice }
if
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 928 -345 a Fa(JARINGAN)29
b(SISTEM)f(INF)n(ORMASI)f(VIA)i(SMS/TELEF)n(ON)965 -245
y(LINGKUNGAN)g(ST)f(PETR)n(US)f(MA)n(GUW)n(O)g(T)-7 b(AHUN)29
b(2010)-17 6245 y
 tx@Dict begin CP CP translate 0.992  0.992  scale NET  end
 -17 6245 a -17 -24 a
 tx@Dict begin tx@NodeDict begin {9.77223 4.77222 85.84508 42.92253 3.01385 } false /N@M-1-1-1 16 {InitRnode } NewNode end end
 -17 -24 a 32 w
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.77222 neg 82.04507 9.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial 8 x Fa(A.)f(W)-7
b(aldiman)791 -24 y
 tx@Dict begin tx@NodeDict begin {9.71666 4.71666 85.84508 42.92253 3.01385 } false /N@M-1-1-2 16 {InitRnode } NewNode end end
 791 -24 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.71666 neg 82.04507 9.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial 8 x Fa(P)g(.)27 b(Samino)1627 -24 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 92.95827 46.47913 3.01385 } false /N@M-1-1-3 16 {InitRnode } NewNode end end
 1627
-24 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 89.15826 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42
x Fa(C.)h(Prihatiningt)n(y)n(as)1659 33 y(08122940457)2523
-24 y
 tx@Dict begin tx@NodeDict begin {21.77223 16.77222 85.84508 42.92253 3.01385 } false /N@M-1-1-4 16 {InitRnode } NewNode end end
 2523 -24 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.77222 neg 82.04507 21.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-92 x Fa(Ign.)134 b(Sudarmini)2555 -16 y(Titus)2555 83
y(0811267658)3330 -24 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-1-5 16 {InitRnode } NewNode end end
 3330 -24 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Sri)27 b(Budiarti)3362
33 y(7480130)-17 471 y
 tx@Dict begin tx@NodeDict begin {27.71666 22.71666 85.84508 42.92253 3.01385 } false /N@M-1-2-1 16 {InitRnode } NewNode end end
 -17 471 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 22.71666 neg 82.04507 27.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial -141 x Fa(Kus)286 b(Sujar-)15 429 y(w)n(an)n(to/OKA)15
529 y(4333577,)15 628 y(085643430434)791 471 y
 tx@Dict begin tx@NodeDict begin {21.77223 16.77222 85.84508 42.92253 3.01385 } false /N@M-1-2-2 16 {InitRnode } NewNode end end
 791 471
a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.77222 neg 82.04507 21.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -91 x Fa(Neo)27
b(Suradi)822 479 y(556180,)822 579 y(081578115615)1657
471 y
 tx@Dict begin tx@NodeDict begin {21.71666 16.71666 85.84508 42.92253 3.01385 } false /N@M-1-2-3 16 {InitRnode } NewNode end end
 1657 471 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.71666 neg 82.04507 21.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-92 x Fa(Y.)h(Suy)n(an)n(to)1688 479 y(4333886,)1688
579 y(08562869037)2523 471 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-2-4 16 {InitRnode } NewNode end end
 2523 471 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -41 x Fa(MOS)f(P)n(admini)g(S)2555
529 y(0811256059)3330 471 y
 tx@Dict begin tx@NodeDict begin {21.71666 16.71666 85.84508 42.92253 3.01385 } false /N@M-1-2-5 16 {InitRnode } NewNode end end
 3330 471 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.71666 neg 82.04507 21.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -92 x Fa(Agustin)n(us)3362 479
y(Sumary)n(ono)3362 579 y(081804264250)-17 1017 y
 tx@Dict begin tx@NodeDict begin {27.77223 22.77222 85.84508 42.92253 3.01385 } false /N@M-1-3-1 16 {InitRnode } NewNode end end
 -17
1017 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 22.77222 neg 82.04507 27.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -141
x Fa(Andre)h(Muda)15 975 y(081328692102)15 1075 y(Illona)f(Muda)15
1174 y(081328795814)791 1017 y
 tx@Dict begin tx@NodeDict begin {21.77223 16.77222 85.84508 42.92253 3.01385 } false /N@M-1-3-2 16 {InitRnode } NewNode end end
 791 1017 a 31 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.77222 neg 82.04507 21.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -92 x Fa(Ig.Luddy)g(Indra)822
1025 y(08122700806,)822 1125 y(4333648)1657 1017 y
 tx@Dict begin tx@NodeDict begin {21.77223 16.77222 85.84508 42.92253 3.01385 } false /N@M-1-3-3 16 {InitRnode } NewNode end end
 1657
1017 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.77222 neg 82.04507 21.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -92
x Fa(Sami)h(Rahardjo)1688 1025 y(4333807,)1688 1125 y(081578778777)2523
1017 y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-3-4 16 {InitRnode } NewNode end end
 2523 1017 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(Sugiy)n(ono)2555 1074 y(4333825)3330 1017 y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-3-5 16 {InitRnode } NewNode end end

3330 1017 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(M.)g(Dary)n(an)n(to)3362 1074 y(7892789)340
1513 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-4-1 16 {InitRnode } NewNode end end
 340 1513 a 791 1513 a
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-4-2 16 {InitRnode } NewNode end end
 791 1513 a 31 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Sidhi)g(H)822 1571 y(4333630)1627
1513 y
 tx@Dict begin tx@NodeDict begin {21.77223 16.77222 92.95827 46.47913 3.01385 } false /N@M-1-4-3 16 {InitRnode } NewNode end end
 1627 1513 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.77222 neg 89.15826 21.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-91 x Fa(Abas)f(Suhardjo)1659 1521 y(485671,)1659 1621
y(081328564524)2523 1513 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-4-4 16 {InitRnode } NewNode end end
 2523 1513 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Theo)r(dorus)f(T)-7
b(otok)2555 1571 y(081392025525)3330 1513 y
 tx@Dict begin tx@NodeDict begin {16.74445 11.74445 85.84508 42.92253 3.01385 } false /N@M-1-4-5 16 {InitRnode } NewNode end end
 3330 1513
a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 11.74445 neg 82.04507 16.74445 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -50 x Fa(Herliana)n(w)n
(ati)26 b(Ek)n(o)3362 1563 y(7435255,)-17 2009 y
 tx@Dict begin tx@NodeDict begin {27.71666 22.71666 85.84508 42.92253 3.01385 } false /N@M-1-5-1 16 {InitRnode } NewNode end end
 -17
2009 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 22.71666 neg 82.04507 27.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -142
x Fa(Agung)h(DJ)15 1967 y(085228245479)15 2066 y(Ch.)37
b(Suk)-5 b(arjono)15 2166 y(08122983365)791 2009 y
 tx@Dict begin tx@NodeDict begin {21.77223 16.77222 85.84508 42.92253 3.01385 } false /N@M-1-5-2 16 {InitRnode } NewNode end end
 791
2009 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.77222 neg 82.04507 21.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -92
x Fa(Budiman)822 2017 y(4333578,)822 2117 y(08122942583)1657
2009 y
 tx@Dict begin tx@NodeDict begin {22.05 17.05 85.84508 42.92253 3.01385 } false /N@M-1-5-3 16 {InitRnode } NewNode end end
 1657 2009 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 17.05 neg 82.04507 22.05 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-89 x Fa(Anas/A.Lamak)n(ey)1688 2019 y(085643173281)1688
2119 y(4333684)2523 2009 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-5-4 16 {InitRnode } NewNode end end
 2523 2009 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Y)e(ak)n(obus)26 b(L)2555
2067 y(7839098)3330 2009 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-5-5 16 {InitRnode } NewNode end end
 3330 2009 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Stefan)n(us)h(Subagy)n(o)3362
2067 y(081328080811)340 2505 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-6-1 16 {InitRnode } NewNode end end
 340 2505 a 791 2505 a
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-6-2 16 {InitRnode } NewNode end end

791 2505 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(Ek)n(o)f(Hanan)n(to)822 2563 y(081392258790)1657
2505 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-6-3 16 {InitRnode } NewNode end end
 1657 2505 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(Y)-7 b(oh.)37 b(Suripto)1688 2563 y(0817889303)2523
2505 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-6-4 16 {InitRnode } NewNode end end
 2523 2505 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(FX.)28 b(Sularto)2555 2563 y(081314190698)3330
2505 y
 tx@Dict begin tx@NodeDict begin {21.77223 16.77222 85.84508 42.92253 3.01385 } false /N@M-1-6-5 16 {InitRnode } NewNode end end
 3330 2505 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.77222 neg 82.04507 21.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-92 x Fa(JB.)f(Sudib)n(y)n(o)3362 2513 y(4333829,)3362
2612 y(08164229555)340 2951 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-7-1 16 {InitRnode } NewNode end end
 340 2951 a 791 2951 a
 tx@Dict begin tx@NodeDict begin {9.77223 4.77222 85.84508 42.92253 3.01385 } false /N@M-1-7-2 16 {InitRnode } NewNode end end
 791
2951 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.77222 neg 82.04507 9.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial 8 x
Fa(Domi)h(Suk)-5 b(an)n(to)1598 2951 y
 tx@Dict begin tx@NodeDict begin {21.71666 16.71666 100.07146 50.03572 3.01385 } false /N@M-1-7-3 16 {InitRnode } NewNode end end
 1598 2951 a 31
w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.71666 neg 96.27145 21.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -92 x Fa(Kristina)27
b(Suro)n(y)n(o)1629 2958 y(4333667,)1629 3058 y(08122752803)2523
2951 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-7-4 16 {InitRnode } NewNode end end
 2523 2951 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(Th.)37 b(Nanik)2555 3009 y(08156861272)3330
2951 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-7-5 16 {InitRnode } NewNode end end
 3330 2951 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(H.)28 b(Subagy)n(o)3362 3009 y(4333584)340 3347
y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-8-1 16 {InitRnode } NewNode end end
 340 3347 a 791 3347 a
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-8-2 16 {InitRnode } NewNode end end
 791 3347 a 31 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Zeli)g(An)n(to)822 3405
y(08586837733)1657 3347 y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-8-3 16 {InitRnode } NewNode end end
 1657 3347 a 31 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(A.)g(Sri)g(Supriy)n(ati)1688
3404 y(081328450101)2523 3347 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-8-4 16 {InitRnode } NewNode end end
 2523 3347 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Maria)e(So)r(de)i(M)2555
3405 y(085253890448)3330 3347 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-8-5 16 {InitRnode } NewNode end end
 3330 3347 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Y.)g(Laba)f(A)n(ta)n(w)n(olo)3362
3405 y(08122745350)-17 3793 y
 tx@Dict begin tx@NodeDict begin {27.71666 22.71666 85.84508 42.92253 3.01385 } false /N@M-1-9-1 16 {InitRnode } NewNode end end
 -17 3793 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 22.71666 neg 82.04507 27.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -142 x Fa(VR)173 b(Anggreini)15
3751 y(Sukiy)n(an)n(to/Damar)15 3850 y(488326,)15 3950
y(08562907933)791 3793 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-9-2 16 {InitRnode } NewNode end end
 791 3793 a 31 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(A.)28 b(Dwi)g(W)-7 b(ah)n(yuni)822
3851 y(081392704876)1657 3793 y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-9-3 16 {InitRnode } NewNode end end
 1657 3793 a 31 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Ning)28 b(Hery)1688
3850 y(081328200141)2523 3793 y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-9-4 16 {InitRnode } NewNode end end
 2523 3793 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Ig.Saman)2555 3850 y(081578085478)3330
3793 y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-9-5 16 {InitRnode } NewNode end end
 3330 3793 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(Lasiman,)3362 3850 y(08170426162)340 4291 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-10-1 16 {InitRnode } NewNode end end

340 4291 a 791 4291 a
 tx@Dict begin tx@NodeDict begin {22.05 17.05 85.84508 42.92253 3.01385 } false /N@M-1-10-2 16 {InitRnode } NewNode end end
 791 4291 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 17.05 neg 82.04507 22.05 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial -89 x Fa(Wiwid/P)-7 b(.Sukijo)822 4301 y(487164,)822
4401 y(0817267423)1657 4291 y
 tx@Dict begin tx@NodeDict begin {21.77223 16.77222 85.84508 42.92253 3.01385 } false /N@M-1-10-3 16 {InitRnode } NewNode end end
 1657 4291 a 31 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.77222 neg 82.04507 21.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -92 x Fa(C.)202 b(Supariy)n(ah)1688
4299 y(T)-7 b(risno/Hendro)1688 4399 y(081328032468)2523
4291 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-10-4 16 {InitRnode } NewNode end end
 2523 4291 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(F.Nur)27 b(Susilo)2555 4349 y(7483220)3330 4291
y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-10-5 16 {InitRnode } NewNode end end
 3330 4291 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(Y.)h(Kamari)3362 4348 y(081342612992)340 4740
y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-11-1 16 {InitRnode } NewNode end end
 340 4740 a 791 4740 a
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-11-2 16 {InitRnode } NewNode end end
 791 4740 a 31 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -43 x Fa(Sugiy)n(ati)822 4797
y(488074)1657 4740 y
 tx@Dict begin tx@NodeDict begin {21.77223 16.77222 85.84508 42.92253 3.01385 } false /N@M-1-11-3 16 {InitRnode } NewNode end end
 1657 4740 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.77222 neg 82.04507 21.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial -92 x Fa(Sri)g(Sudarto)1688 4748 y(486955,)1688
4847 y(081328000523)2523 4740 y
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-11-4 16 {InitRnode } NewNode end end
 2523 4740 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -43 x Fa(T)-7 b(ri)27 b(Winarso)2555
4797 y(0816675362)3330 4740 y
 tx@Dict begin tx@NodeDict begin {16.05 11.05 85.84508 42.92253 3.01385 } false /N@M-1-11-5 16 {InitRnode } NewNode end end
 3330 4740 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 11.05 neg 82.04507 16.05 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -40 x Fa(R.)h(Susilo)f(\(Kelik\))3362
4800 y(0274-7483220)340 5136 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-12-1 16 {InitRnode } NewNode end end
 340 5136 a 791 5136 a
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-12-2 16 {InitRnode } NewNode end end

791 5136 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(YF.)h(Lina)g(S.)822 5194 y(08157966006)1657
5136 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-12-3 16 {InitRnode } NewNode end end
 1657 5136 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(Ig.)37 b(Ardi)27 b(Subardi)1688 5194 y(4333865)2523
5136 y
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-12-4 16 {InitRnode } NewNode end end
 2523 5136 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(Ig.)36 b(Muly)n(ono)2555 5194 y(484617)3687
5136 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-12-5 16 {InitRnode } NewNode end end
 3687 5136 a -17 5483 a
 tx@Dict begin tx@NodeDict begin {9.77223 4.77222 85.84508 42.92253 3.01385 } false /N@M-1-13-1 16 {InitRnode } NewNode end end
 -17 5483 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.77222 neg 82.04507 9.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial 8 x Fa(YB.)28 b(Kandari)1147
5483 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-13-2 16 {InitRnode } NewNode end end
 1147 5483 a 1657 5483 a
 tx@Dict begin tx@NodeDict begin {15.77223 10.77222 85.84508 42.92253 3.01385 } false /N@M-1-13-3 16 {InitRnode } NewNode end end
 1657 5483 a 31 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.77222 neg 82.04507 15.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -42 x Fa(Putut)g(Andok)n(o)1688
5541 y(085221610549)2879 5483 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-13-4 16 {InitRnode } NewNode end end
 2879 5483 a -17 5929
a
 tx@Dict begin tx@NodeDict begin {15.71666 10.71666 85.84508 42.92253 3.01385 } false /N@M-1-14-1 16 {InitRnode } NewNode end end
 -17 5929 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 10.71666 neg 82.04507 15.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-42 x Fa(A.)g(Purw)n(oto)15 5987 y(0818468374)791 5929
y
 tx@Dict begin tx@NodeDict begin {27.77223 22.77222 85.84508 42.92253 3.01385 } false /N@M-1-14-2 16 {InitRnode } NewNode end end
 791 5929 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 22.77222 neg 82.04507 27.77223 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
-141 x Fa(Y)-7 b(enn)n(y)28 b(Imelda)822 5888 y(081082794742)822
5987 y(Supangat)822 6087 y(081578043761)1657 5929 y
 tx@Dict begin tx@NodeDict begin {21.71666 16.71666 85.84508 42.92253 3.01385 } false /N@M-1-14-3 16 {InitRnode } NewNode end end
 1657
5929 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.71666 neg 82.04507 21.71666 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial -92
x Fa(Rumiy)n(ati)1688 5937 y(Sisw)n(an)n(to/Leli)1688
6037 y(081392389679)340 6270 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 3.01385 } false /N@M-1-15-1 16 {InitRnode } NewNode end end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-1-4 /N@M-1-1-5 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end

340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-2-2 /N@M-1-1-1 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-2-2 /N@M-1-1-2 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270
a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-2-2 /N@M-1-2-3 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-2-3 /N@M-1-1-3 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270
a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-2-3 /N@M-1-2-4 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-2-4 /N@M-1-1-4 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-2-4 /N@M-1-2-5 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270
a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-3-1 /N@M-1-2-1 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-3-1 /N@M-1-3-2 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270
a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-3-2 /N@M-1-2-2 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-3-2 /N@M-1-3-3 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-3-3 /N@M-1-3-4 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270
a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-3-3 /N@M-1-4-3 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-3-3 /N@M-1-4-4 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270
a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-3-4 /N@M-1-3-5 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-4-4 /N@M-1-4-5 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-4-4 /N@M-1-5-5 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270
a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-5-1 /N@M-1-5-2 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-5-1 /N@M-1-3-1 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270
a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-5-1 /N@M-1-9-1 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-5-2 /N@M-1-4-2 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-5-2 /N@M-1-5-3 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270
a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-5-2 /N@M-1-6-2 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-5-3 /N@M-1-6-3 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270
a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-5-3 /N@M-1-5-4 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-5-4 /N@M-1-6-5 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-6-3 /N@M-1-6-4 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270
a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-7-3 /N@M-1-7-2 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-8-3 /N@M-1-8-2 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270
a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-8-3 /N@M-1-7-3 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-8-4 /N@M-1-7-4 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-8-4 /N@M-1-8-5 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270
a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-8-5 /N@M-1-7-5 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-9-1 /N@M-1-9-2 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270
a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-9-1 /N@M-1-12-2 InitNC { yB yA sub xB xA sub Atan dup -42.  add /AngleA ED -42.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-9-2 /N@M-1-8-3 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-9-2 /N@M-1-9-3 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270
a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-9-2 /N@M-1-10-2 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-9-3 /N@M-1-8-4 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270
a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-9-3 /N@M-1-9-4 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-9-4 /N@M-1-9-5 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-9-4 /N@M-1-10-4 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270
a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-9-5 /N@M-1-10-5 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-10-2 /N@M-1-10-3 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270
a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-10-2 /N@M-1-11-3 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-10-3 /N@M-1-11-4 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-10-4 /N@M-1-11-5 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270
a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-11-3 /N@M-1-11-2 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-11-3 /N@M-1-12-4 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270
a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-12-2 /N@M-1-13-1 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-12-2 /N@M-1-14-2 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-12-2 /N@M-1-13-3 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270
a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-12-2 /N@M-1-12-3 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-12-5 /N@M-1-13-5 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270
a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-14-2 /N@M-1-14-1 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a 340 6270 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@M-1-14-2 /N@M-1-14-3 InitNC { NCLine  } if end gsave 1.5 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 340 6270 a -17 6245 a
 tx@Dict begin CP CP translate 1 0.992 div 1 0.992 div scale NET  end
 -17 6245
a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
